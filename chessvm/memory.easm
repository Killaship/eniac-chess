# - MEMORY -
# Implements LOADACC, STOREACC, LOADWORD, STOREWORD


# - Wiring - 

# Send rightmost 10 digits of f3, plus PMA, to d-ftselacc. 
# This bus carries the result of the 1-of-10 decode table lookup from ft3
# PMA A4A3 A2A1 B6B5 B4B3 B2B1 -> d-ftselacc
$permute f3.A 11,4,3,2,1,0,0,0,0,0,0 {d-ftselacc}
p f3.B {d-ftselacc}

# DISCMEMCYC.A already goes to d-main, so we can send acc idx to ft.arg from digit 1. 
# For LOADWORD we need to be able to send acc index from digit 10, so go through S.
$permute {a-discmemcyc}.S 0,0,0,0,0,0,0,0,0,0,10 {d-main}


if ACC_MEMCYC
# Each accumulator has a "memory cycle" that is three cycles long
#  - dummy
#  - send to d-main and clear 
#  - receive from d-main
# This cycle can be used to implement both read and write from each acc


# Create the memory cycle program for each acc
# Start with a dummy triggered from memcyc[09|1014].S. Delays one cycle (delay=2, as delay 1 
# means very next cycle when triggered from digit pulses). 
defmacro memcyc-prog x range
  $dummy-delay-exclude {p-memcyc$x} 2 {p-memcyc$x-2} -{a-memcyc$range}
  $sendc {p-memcyc$x-2} {a-mem$x} {t-memcyc-2} A {p-memcyc$x-3}
  $recx  {p-memcyc$x-3} {a-mem$x} {x-memcyc-3} {i-main}
endmacro

# Patch one digit of d-memcyc09S to a send reciever program on mem0..mem9
# shift to get desired digit in 2 position, then use digit select adapter
# 2 position because 1 position always generates 1'P pulse on S send. This
# means trigger for 9 is stored in PM digit
defmacro select-memcyc09-acc x
  p {d-memcyc09S} ad.s.{ad-memcyc-$x}.-$x
  p ad.s.{ad-memcyc-$x}.-$x ad.dp.{ad-memcyc-dp$x}.2
  p ad.dp.{ad-memcyc-dp$x}.2 {p-memcyc$x}
endmacro

# Decode and allocate the memcyc programs for each acc
defmacro connect-memcyc09 x 
  $select-memcyc09-acc $x
  $memcyc-prog $x 09
endmacro

$connect-memcyc09 0
$connect-memcyc09 1
$connect-memcyc09 2
$connect-memcyc09 3
$connect-memcyc09 4
$connect-memcyc09 5
$connect-memcyc09 6
$connect-memcyc09 7
$connect-memcyc09 8
$connect-memcyc09 9

# similar for 10-14
defmacro select-memcyc1014-acc x minus10
  p {d-memcyc1014S} ad.s.{ad-memcyc-$x}.-$minus10
  p ad.s.{ad-memcyc-$x}.-$minus10 ad.dp.{ad-memcyc-dp$x}.2
  p ad.dp.{ad-memcyc-dp$x}.2 {p-memcyc$x}
endmacro

defmacro connect-memcyc1014 x minus10
  $select-memcyc1014-acc $x $minus10
  $memcyc-prog $x 1014
endmacro

$connect-memcyc1014 10 0
$connect-memcyc1014 11 1
$connect-memcyc1014 12 2
$connect-memcyc1014 13 3
$connect-memcyc1014 14 4

endif # ACC_MEMCYC


# - SUB_MEMCYC - 
if SUB_MEMCYC
# This is the main memory cycle sub-program.
# Implements LOADACC/STOREACC by decoding memacc index in A, then triggering memory cycle
# program on the appropriate accumulator. Also used for LOADWORD/STOREWORD.
# Does not return to fetch.

# Start by saving DISCMEMCYC -> EX, clear
$sendc {p-sub-memcyc} {a-discmemcyc} {t-sub-memcyc} A {p-sub-memcyc-2}
$loadex {p-sub-memcyc}

# send A to DISCMEMCYC, first digit into sign: 9 XX XX XX XX A2A1 -> A2 90 00 00 00 0A1
# Need a 9 in digit 10 so a-discmemcyc.S does not clash on d-main. The 9 comes from sendM0
$send-rf {p-sub-memcyc-2}
$sendM0 {p-sub-memcyc-2}
$rec {p-sub-memcyc-2} {a-discmemcyc} {t-sub-memcyc-2} {i-splitA} {p-sub-memcyc-3}

# Invert the sign, because the discriminate below is wired that way. Why?
# TRADE 5 c-dummies -> 5 pulsesamps
# Long story. We send loadacc/storeacc acc idx on DISCMEMCYC.A and loadword/storeword
# acc idx on DISCMEMCYC.S, which means we compute the complement of the acc idx in 
# SUB_WORDCYC. To re-use the same discriminate for 0-9 vs 10-14, either SUB_MEMCYC or  
# SUB_WORDCYC needs to invert the sign first. If we invert in SUB_WORDCYC then we need
# a 15 cycle delay between decoding the word (STOREWORD cycle 7) and the MOV A,X sequence, 
# which is 1 longer than the max 14 cycle multiplier dummy. That requires 5 more c-dummies
# in the STOREWORD word programs, one for each alignment. So, invert here instead, and
# wire the discriminate so the invert is not needed for STOREWORD, saving one cycle there.
$sendM0 {p-sub-memcyc-3}
$recx {p-sub-memcyc-3} {a-discmemcyc} {x-sub-memcyc-3} {i-main}
$dummy {p-sub-memcyc-3} {p-sub-memcyc-disc} # can't use c-dummy, ct active this cycle

# trigger FT this cycle
p {p-sub-memcyc-3} f3.{t-sub-memcyc}i
s f3.op{t-sub-memcyc} A-2   # A-2 so our decode table overlaps less with code

# Discriminate: are we reading from 0-9 (sign=M) or 10-14 (sign=P)?
# Always triggers {p-sub-memcyc-4} next cycle, but wait 2 cycles before triggering 
# conditional branches (p-sub-memcyc09 vs p-sub-memcyc1014), as the next op is shared
# Since we're sending DISCMEMCYC.A to main anyway, ft arg is also loaded this cycle 
$discriminatec-delay-passthru {p-sub-memcyc-disc} {a-discmemcyc} {d-discmemcycA} {d-discmemcycS} 2 {p-sub-memcyc-4} {p-sub-memcyc1014} {p-sub-memcyc09} 

# Shared step post discriminate, executed regardless of branch taken
# EX -> DISCMEMCYC, restore it
$recx {p-sub-memcyc-4} {a-discmemcyc} {t-sub-memcyc-4} {i-main} 
$storeex {p-sub-memcyc-4}

# POSITIVE (0-9) and NEGATIVE (10-14) branches of discriminate differ only on which acc
defmacro sub-memcyc-branch x
  # Save MEMCYC$x -> EX, clear
  $sendc {p-sub-memcyc$x} {a-memcyc$x} {t-sub-memcyc$x} A {p-sub-memcyc$x-2}
  $loadex {p-sub-memcyc$x}

  # FT -> MEMCYC$x, read FT line when it's ready
  $rec {p-sub-memcyc$x-2} {a-memcyc$x} {t-sub-memcyc$x-2} {i-ftselacc} {p-sub-memcyc$x-3}

  # MEMCYC$x -S-> trigger memXX loadstore
  # Now MEMCYC$x is all 9 except for a 0 for the accumulator we want. When we send on S,
  # it will activate the loadstore program of one accumulator. Clear as we do this,
  # so we can restore from EX later
  $sendc {p-sub-memcyc$x-3} {a-memcyc$x} {t-sub-memcyc$x-3} S {p-sub-memcyc$x-4}

  # restore MEMCYC$x
  $recx {p-sub-memcyc$x-4} {a-memcyc$x} {r-sub-memcyc$x-4} {i-main}
  $storeex {p-sub-memcyc$x-4}
endmacro

$sub-memcyc-branch 09
$sub-memcyc-branch 1014

# Now the "memory cycle" proper. Each mem acc will execute a sendc then rec
# This can be used to load or store, as follows:
#      ACC                   LOAD           STORE
# 1.   acc -> main, clear    main -> LS     main -signonly-> LS 
# 2.   main -> acc           LS -> main     LS -> main
# Therefore put  LS -> main in this shared program, we always want it

# Wait 5 cycles until the address is decoded, then LS -> MEMXX, restore accu value
# Not an ft dummy because f1,f2 will also be active here in LOADWORD/STOREWORD
# Manually placed to avoid conflict with memcyc
$manual-dummy {p-sub-memcyc-4} {a-ir} {t-sub-memcyc-4} 6 {p-sendls}


endif # SUB_MEMCYC


# - LOADACC -
if OP_LOADACC
# To do a LOADACC, trigger SUB_MEMCYC and
# - clear LS at start
# - main -> LS during accumulator memory cycle, to read the value coming out

$pulseamp {p-oploadacc} {p-sub-memcyc}

# clear LS, we'll want that empty to recieve acc value
# do this via dummy to save a pulseamp, timing not important
$c-dummy {p-oploadacc} {p-clearls}

# wait for the memcycle then MEMXX-> LS, receive accumulator value
$ft-dummy-exclude {p-oploadacc} 9 {p-oploadacc-2} -f2,f3
$pulseamp {p-oploadacc-2} {p-recls}

# fetch after LS->MEMXX (of SUB_MEMCYC) finishes 
$ft-dummy-exclude {p-oploadacc} 11 {p-fetch} -f1,f3

endif # OP_LOADACC


# - STOREACC -
if OP_STOREACC
# To do STOREACC, trigger SUB_MEMCYC and
#  - clear LS sign at start
#  - main -signonly-> LS during acc mem cyc, to preserve acc PM but otherwise overwrite

# Start by saving DISCMEMCYC -> EX, clear
$sendc {p-opstoreacc} {a-discmemcyc} {t-opstoreacc} A {p-opstoreacc-2}
$loadex {p-opstoreacc}

# clear sign of LS by ping-pong to DISCMEMCYC through i-dropsign
# this is necessary to preserve sign of DISCFTx when storing there
$sendc {p-opstoreacc-2} {a-ls} {t-opstoreacc-2} A {p-opstoreacc-3}
$recx {p-opstoreacc-2} {a-discmemcyc} {r-opstoreacc-2} {i-dropsign}

$sendcx {p-opstoreacc-3} {a-discmemcyc} {r-opstoreacc-3} A 
$rec {p-opstoreacc-3} {a-ls} {t-opstoreacc-3} {i-main} {p-opstoreacc-4} 

# Wait until accumulator outputs a value, save only the sign
$ft-dummy-exclude {p-opstoreacc-3} 9 {p-opstoreacc-5} -f3

# Jump into sub-memcyc - no pulseamp needed because p-opstoreacc-4 triggers nothing else
p {p-opstoreacc-4} {p-sub-memcyc-2}

# Receive only sign on mem->LS, preserve sign when LS->mem next cycle
$recx {p-opstoreacc-5} {a-ls} {x-opstoreacc-4} {i-signonly}

# out of transcievers on a-ls, so also trigger a dummy to wait out memcycle
$c-dummy {p-opstoreacc-5} {p-opstoreacc-6}
$c-dummy {p-opstoreacc-6} {p-fetch}

endif # OP_STOREACC



if OP_LOADWORD

# - SUB-WORDTOP -
# The first three cycles of LOADWORD and STOREWORD are shared, they do the 
# word decode from B and send word idx to FT3.
# Does not return to fetch.

# LOADWORD -> EX, clear
$sendc {p-sub-wordtop} {a-loadword} {t-sub-wordtop} A {p-sub-wordtop-2}
$loadex {p-sub-wordtop}

# Also clear LS (via dummy to save a pulseamp, timing not important)
$c-dummy {p-sub-wordtop} {p-clearls}

# RF -windexB-> LOADWORD, trigger ft3
# This puts second digit of B into digit 1 of LOADWORD, to send to FT
$send-rf {p-sub-wordtop-2}
$rec {p-sub-wordtop-2} {a-loadword} {t-sub-wordtop-2} {i-windexB} {p-sub-wordtop-3}

# trigger FT this cycle
p {p-sub-wordtop-2} f3.{t-sub-wordtop}i
s f3.op{t-sub-wordtop} A-2

# LOADWORD -> ft3.arg
$sendcx {p-sub-wordtop-3} {a-loadword} {r-sub-wordtop-3} A


# - SUB-WORDCYC -
# Decode acc idx from B and trigger a memory cycle on the acc we are addressing.
# Does not return to fetch.
#
# Easiest way to compute acc index is to double the address in B and take top 2 digits:
#    0          B2         B1
# +  0          B2         B1 
#  -----------------------------
#  B2>=5  2B2%10+B1>=5   2B1%10 
#
# Let's call these
#    D3         D2         D1
#
# Then accidx = D3D2. If D3=PM, D2=10 then the sign is set up to discriminate 0-9 vs. 10-14
# Hence i-accidxB: X XX B2B1 XX XX XX XX -> 0 B2B1 00 00 00 00 and we add twice
# To send D2 to ft.arg, we use DISCMEMCYC.S. So we also need to receive negated from RF.S

# DISCMEMCYC -> EX
$sendc {p-sub-wordcyc} {a-discmemcyc} {t-oploadword} A {p-sub-wordcyc-2}
$loadex {p-sub-wordcyc}

# RF -S-accidxB-> DISCMEMCYC, twice
# Then jump straight into the discrimination step of SUB_MEMCYC
$send {p-sub-wordcyc-2} {a-rf} {t-sub-wordcyc-2} S {p-sub-memcyc-disc}
s {a-rf}.rp{t-sub-wordcyc-2} 2
$recx {p-sub-wordcyc-2} {a-discmemcyc} {t-sub-wordcyc-2} {i-accidxB} 
s {a-discmemcyc}.rp{t-sub-wordcyc-2} 2

# trigger FT3 lookup on second send, it will get argument on DISCMEMCYC.S next cycle 
$c-dummy {p-sub-wordcyc-2} {p-sub-wordcyc-3}
p {p-sub-wordcyc-3} f3.{t-sub-wordcyc-3}i
s f3.op{t-sub-wordcyc-3} A-2


# - LOADWORD dummies -
# These are the timers that "remember" which word index (0-4) is addressed in B,
# on long timers while a LOADACC cycle takes place
# Wire up the S outputs of LOADWORD (via d-loadword) to trigger mov programs
defmacro connect-loadword-1 x prog
  p {d-loadword} ad.s.{ad-loadword-$x}.-$x
  p ad.s.{ad-loadword-$x}.-$x ad.dp.{ad-loadword-dp$x}.2
  p ad.dp.{ad-loadword-dp$x}.2 {p-loadword-$prog}
endmacro

# Wire up two digit lines to each of FGHIJ. This computes digit % 5
# Wait 13 cycles on f2 to allow loadacc to execute before the mov
defmacro connect-loadword a b prog
  $connect-loadword-1 $a $prog
  $connect-loadword-1 $b $prog
  $ft-dummy-exclude {p-loadword-$prog} 12 {p-$prog} -f1,f3
endmacro

$connect-loadword 0 5 op34  # MOV F,A
$connect-loadword 1 6 op30  # MOV G,A
$connect-loadword 2 7 op31  # MOV H,A
$connect-loadword 3 8 op32  # MOV I,A
$connect-loadword 4 9 op33  # MOV J,A


# - MOV [B],A aka LOADWORD -
# Use the word index (B2 % 5) to trigger one of the five MOV [FGHIJ],A programs 
# on long ft2 dummies, so they execute after LOADACC on the acc index 
# Timers:
#   ft1 = wait for memcycle
#   ft2 = mov X,A dummies (1-of-5 decoded)
#   ft3 = word/acc lookup

# Start by triggering the word decode, then wait until ft3 output ready
$pulseamp {p-oploadword} {p-sub-wordtop}
$ft-dummy-exclude {p-oploadword} 5 {p-oploadword-4} -f3,f1    # on f2, finishes before f2 used for word timer

# 1. LOADWORD -> EX, clear LS
# 2. RF -windexB-> LOADWORD, trigger ft3
# 3. LOADWORD -> ft3.arg          # usual 10 entry lookup table
# 4. wait                         # ft shadow
# 5. wait

# When ready, receive the looked up value into LOADWORD
# 6. ft3 -> LOADWORD
$rec {p-oploadword-4} {a-loadword} {t-oploadword-4} {i-ftselacc} {p-oploadword-5}

# 7. send LOADWORD.S, triggers f2 dummies for MOV [FGHIJ],A after loadacc
$sendc {p-oploadword-5} {a-loadword} {t-oploadword-5} S {p-oploadword-6}

# 8. EX -> LOADWORD
$storeex {p-oploadword-6}
$recx {p-oploadword-6} {a-loadword} {r-oploadword-6} {i-main}

# Decode acc idx from B and trigger a memcycle on that acc
$c-dummy {p-oploadword-6} {p-sub-wordcyc}

# We also need to execute a rec on LS (ala LOADACC) then p-opmovLSA
# Time this on f1 as f2 is the word program and f3 will lookup acc idx
$ft-dummy-exclude {p-oploadword-6} 10 {p-oploadword-10} -f2,f3

# 9. DISCMEMCYC -> EX               
# 10. RF -i-accidxB-> DISCMEMCYC
# 11. RF -i-accidxB-> DISCMEMCYC, trigger ft3
# 12. discriminate DISCMEMCYC, DISCMEMCYC -S-> ft3.arg
# 13. EX -> DISCMEMCYC
# 14. MEMCYC09/1014 -> EX
# 15. ft3 -> MEMCYC09/1014
# 16. MEMCYC09/1014 -> S          # trigger acc memcycle
# 17. EX -> MEMCYC09/1014

# 18. memacc -> LS, receive mem acc into LS; triggered by f1 timer
$rec {p-oploadword-10} {a-ls} {t-oploadword-10} {i-main} {p-oploadword-11}

# 19. LS -> memacc

# When memcycle completes, trigger p-opmovXA which is required to do MOV [FGHIJ],A
$c-dummy {p-oploadword-11} {p-opmovXA}

# 20. MOV [FGHIJ],A begins, triggered by f2 word timer


endif # OP_LOADWORD

if OP_STOREWORD

# - STOREWORD dummies -
# Wire up the S outputs of STOREWORD (via d-storeword) to trigger mov programs
# XXX more realistic if we can find a digit trunk somewhere for {a-storeword}.S?
defmacro connect-storeword-1 x prog
  p {a-storeword}.S ad.s.{ad-storeword-$x}.-$x
  p ad.s.{ad-storeword-$x}.-$x ad.dp.{ad-storeword-dp$x}.2
  p ad.dp.{ad-storeword-dp$x}.2 {p-storeword-$prog}
endmacro

# Connect storeword.S to trigger second digit mod 5 program on ft2
# These programs implement mov A,[FGHIJ]
defmacro connect-storeword a b prog input
  $connect-storeword-1 $a $prog
  $connect-storeword-1 $b $prog
  $m-dummy {p-storeword-$prog} 14 {p-storeword-$prog-2}

  # receive on {a-swap}.{i-swapAX} twice with two cycles between
  $pulseamp {p-storeword-$prog-2} {p-storeword-$prog-execute}
  $dummy-delay-exclude {p-storeword-$prog-2} 3 {p-storeword-$prog-execute} -{a-swap}

  $recx {p-storeword-$prog-execute} {a-swap} {x-store-$prog} $input
endmacro

$connect-storeword 0 5 movAF {i-main}     # equivalent to swapAA
$connect-storeword 1 6 movAG {i-swapAB}
$connect-storeword 2 7 movAH {i-swapAC}
$connect-storeword 3 8 movAI {i-swapAD}
$connect-storeword 4 9 movAJ {i-swapAE}


# - MOV A,[B] aka STOREWORD -
# Works like this:
#   - decode word and start word program timers on ft2
#   - decode acc, LOADACC
#   - word timers trigger MOV A,[FGHIJ]
#   - decode acc, STOREACC
#
# The complicated parts are sharing enough of this with other programs 
# to do it without running out of transceivers
#
# Timers:
#   f1 = mem->LS 
#   f2 = mov A,X main program
#   multiplier = mov A,X word programs (1-of-5 decoded)
#   f3 = word/acc lookup

# Start by triggering the word decode, then wait until ft shadow

$pulseamp {p-opstoreword} {p-sub-wordtop}
$dummy-delay-exclude {p-opstoreword} 3 {p-opstoreword-2} -{a-loadword}

# 1. LOADWORD -> EX, clear LS
# 2. RF -windexB-> LOADWORD, trigger ft3
# 3. LOADWORD -> ft3.arg          # usual 10 entry lookup table

# While ft3 is looking up the word index, free up STOREWORD
# 4. EX -> LOADWORD
$storeex {p-opstoreword-2}
$rec {p-opstoreword-2} {a-loadword} {t-opstoreword-2} {i-main} {p-opstoreword-3} 

# 5. STOREWORD -> EX, clear
$sendc {p-opstoreword-3} {a-storeword} {t-oplstoreword-3} A {p-opstoreword-4}
$loadex {p-opstoreword-3}

# 6. ft3 -> STOREWORD
$rec {p-opstoreword-4} {a-storeword} {t-opstoreword-4} {i-ftselacc} {p-opstoreword-5}

# 7. send STOREWORD.S, triggers ft dummies for MOV A,[FGHIJ],A after loadacc
$sendc {p-opstoreword-5} {a-storeword} {t-storeword-5} S {p-opstoreword-6}

# 8. EX -> STOREWORD. 
# Then start the memory cycle: decode acc idx from B and LOADACC
$storeex {p-opstoreword-6}
$rec {p-opstoreword-6} {a-storeword} {t-opstoreword-6} {i-main} {p-sub-wordcyc}

# We also need to execute mem->LS (ala LOADACC) at the right time, then mov A,[FGHIJ]
$ft-dummy-exclude {p-opstoreword-6} 10 {p-recls} -f2,f3       # on f1
$ft-dummy-exclude {p-opstoreword-6} 12 {p-opsw-movAX} -f1,f3  # on f2

# 9. DISCMEMCYC -> EX               
# 10. RF -i-accidxB-> DISCMEMCYC
# 11. RF -i-accidxB-> DISCMEMCYC
# 12. send M0->DISCMEMCYC, trigger ft3
# 13. discriminate DISCMEMCYC, DISCMEMCYC -S-> ft3.arg
# 14. EX -> DISCMEMCYC
# 15. MEMCYC09/1014 -> EX
# 16. ft3 -> MEMCYC09/1014
# 17. MEMCYC09/1014 -> S          # trigger acc memcycle
# 18. EX -> MEMCYC09/1014

# 19. acc->LS when memcycle starts, triggered by f1 timer
# 20. LS -> memacc

# Now we execute MOV A,[FGHIJ], triggered by f2 timer
# This is a longish 7-cycle sequence, but all except two -swapAX->SWAP progs are shared
# The logic is swap F,X / mov A,F / swap F,X

# 21. SWAP -> EX
$sendc {p-opsw-movAX} {a-swap} {t-movAX} A {p-opsw-movAX-2}
$loadex {p-opsw-movAX}

# 22. LS -> + -swapAX-> SWAP triggered by m-dummy
$pulseamp {p-opsw-movAX-2} {p-sendcls}
$c-dummy {p-opsw-movAX-2} {p-opsw-movAX-3}

# 23. SWAP -clearA-> LS
$sendc {p-opsw-movAX-3} {a-swap} {t-movAX-3} A {p-opsw-movAX-4}
$recx {p-opsw-movAX-3} {a-ls} {x-movAX-3} {i-clearA}

# 24. RF -selA-> LS
$send-rf {p-opsw-movAX-4}
$recx {p-opsw-movAX-4} {a-ls} {x-movAX-4} {i-selA} 
$c-dummy {p-opsw-movAX-4} {p-opsw-movAX-5}

# 25. LS -> + -swapAX-> SWAP triggered by m-dummy
$pulseamp {p-opsw-movAX-5} {p-sendcls}
$c-dummy {p-opsw-movAX-5} {p-opsw-movAX-6}

# 26. SWAP -> LS
$sendc {p-opsw-movAX-6} {a-swap} {t-movAX-6} A {p-opsw-movAX-7}
$pulseamp {p-opsw-movAX-6} {p-recls}

# 27. EX -> SWAP
$storeex {p-opsw-movAX-7}
$rec {p-opsw-movAX-7} {a-swap} {t-movAX-7} {i-main} {p-sub-wordcyc}

# Do another cycle on the mem acc, this time it's a write because we skip acc->LS

# 28. DISCMEMCYC -> EX               
# 29. RF -i-accidxB-> DISCMEMCYC
# 30. RF -i-accidxB-> DISCMEMCYC, trigger ft3
# 31. discriminate DISCMEMCYC, DISCMEMCYC -S-> ft3.arg
# 32. EX -> DISCMEMCYC
# 33. MEMCYC09/1014 -> EX
# 34. ft3 -> MEMCYC09/1014
# 35. MEMCYC09/1014 -> S          # trigger acc memcycle
# 36. EX -> MEMCYC09/1014
# 37. acc ->                      # no receiver, this is a store
# 38. LS -> acc

# Wait for sub-wordcyc and finish
$ft-dummy-exclude {p-opsw-movAX-7} 12 {p-fetch} -f3

endif   # OP_STOREWORD



# -- Accumulator 1-of-10 decode lookup table --
# lookup table used to trigger accumulators on loadacc / storeacc
defmacro acc-decode-line line x01 x02 x03 x04 x05 x06 x07 x08 x09 x10
  s f3.RA$lineS  $x01
  s f3.RA$lineL4 $x02
  s f3.RA$lineL3 $x03
  s f3.RA$lineL2 $x04
  s f3.RA$lineL1 $x05
  s f3.RB$lineL6 $x06
  s f3.RB$lineL5 $x07
  s f3.RB$lineL4 $x08
  s f3.RB$lineL3 $x09
  s f3.RB$lineL2 $x10
  s f3.RB$lineL1 9      # use 2-10 + sign, digit 1 is not usable on S due to 1'P
endmacro

s f3.mpm1 T             # send individual line signs through

# These are the 9s complements of 000..9..00 (we send from memcyc09/memcyc1014 on S)
# Use rows -2..7 with A-2 addressing to minimize program overlap.
$acc-decode-line -2 M 9 9 9 9 9 9 9 9 0
$acc-decode-line -1 M 9 9 9 9 9 9 9 0 9
$acc-decode-line  0 M 9 9 9 9 9 9 0 9 9
$acc-decode-line  1 M 9 9 9 9 9 0 9 9 9
$acc-decode-line  2 M 9 9 9 9 0 9 9 9 9
$acc-decode-line  3 M 9 9 9 0 9 9 9 9 9
$acc-decode-line  4 M 9 9 0 9 9 9 9 9 9
$acc-decode-line  5 M 9 0 9 9 9 9 9 9 9
$acc-decode-line  6 M 0 9 9 9 9 9 9 9 9
$acc-decode-line  7 P 9 9 9 9 9 9 9 9 9
