# -- JUMPS --
# Implements JMP, JMP FAR, JN, JZ, JIL, JSR, RET, FTL


# - SUB-JMP -
if SUB_JMP
# Near jump (2 digits, i.e. no FT switch) to immediate operand
# Used by JMP, JN, JZ, JIL

defmacro jmp prog
  $pulseamp $prog {p-sub-jmp}
endmacro

# Clear lower digits of PC (not ftsg, this is a near jump)
# PC -clearPC2-> EX
$sendc {p-sub-jmp} {a-pc} {t-sub-jmp} A {p-sub-jmp-2}
$recx {p-sub-jmp} {a-ex} {t-sub-jmp} {i-clearPC2} 

# EX -> PC
$storeex {p-sub-jmp-2}
$rec {p-sub-jmp-2} {a-pc} {t-sub-jmp-2} {i-main} {p-sub-jmp-3}

# Copy next word in IR to PC, then fetchline. Because we jump, don't need to update IR
$sendx {p-sub-jmp-3} {a-ir} {r-send} A
$rec {p-sub-jmp-3} {a-pc} {t-sub-jmp-3} {i-loadPC2} {p-fetchline} 

endif # SUB_JMP


# - JMP XX -
if OP_JMP

p {p-opjmp} {p-sub-jmp}

endif # OP_JMP


# - DISCFT -
if SUB_DISCFT
# The common receive portion of the sequence to select ft from PC ftsg
# Note that applying this twice is a NOP. So for far jumps (JMP FAR/JSR/RET)
# we invoke once with current PC, then update FTSG, and call again.

defmacro discft prog
  $pulseamp $prog {p-sub-discft}
endmacro

# Decode discft1 and discft2 signs
$recx {p-sub-discft} {a-discft1} {r-sub-discft} {i-ftsg2}
$rec {p-sub-discft} {a-discft2} {t-sub-discft} {i-ftsg1} {p-sub-discft-2}
$recx {p-sub-discft} {a-discft3} {r-sub-discft} {i-ftsg1}

# Finish decoding discft3 sign
$recx {p-sub-discft-2} {a-discft3} {r-sub-discft-2} {i-ftsg2}

endif # SUB_DISCFT


# - FARGO -
if SUB_FARGO
# Used for all far jumps: JMP FAR, JSR, RET
# Select a new PC and return address and go to p-fetchline
# 1. NEWPC -> EX
# 2. (JMP FAR) IR -extract-pc -> NEWPC
#    (JSR)     IR -extract-pc -> NEWPC
#    (RET)     nop
# 3. (JMP FAR) PC -keep-r     -> NEWPC  $discft-1
#    (JSR)     PC -shiftl4-pc -> NEWPC  $discft-1
#    (RET)     PC -shiftr4-pc -> NEWPC  $discft-1
# 4. (send PC)                 $discft-2
# 5. NEWPC -> PC             $discft-1
# 6. (send NEWPC)            $discft-2
#  . EX -> NEWPC             (parallel with p-fetchline)
#
# TODO investigate alternative 5-cycle sequence that moves up IR->NEWPC
# Is it worth the extra resource usage?
# 1. NEWPC -> EX
# 2. (JMP FAR) PC -keep-r     -> NEWPC  $discft-1
#    (JSR)     PC -shiftl4-pc -> NEWPC  $discft-1
#    (RET)     PC -shiftr4-pc -> NEWPC  $discft-1
# 3. (send PC)                            $discft-2
# 4. (JMP FAR) IR -extract-pc -> NEWPC  $discft-1
#    (JSR)     IR -extract-pc -> NEWPC  $discft-1
#    (RET)     send NEWPC               $discft-1
# 5. NEWPC -> PC                        $discft-2
#  . EX -> NEWPC             (parallel with p-fetchline)
defmacro fargo prog
  $m-pulseamp $prog {p-sub-fargo}
endmacro

# Save newpc in ex
$sendc {p-sub-fargo} {a-newpc} {t-sub-fargo} A {p-sub-fargo-2}
#$loadex {p-sub-fargo}
$recx {p-sub-fargo} {a-ex} {t-sub-fargo} {i-main}

# Set new PC from IR (JMP FAR/JSR) or nop (RET)
$rec {p-sub-fargo-2} {a-newpc} {t-sub-fargo-2} {i-extract-pc} {p-sub-fargo-3}

# Set new return address from PC (all) and deselect current FT
$sendc {p-sub-fargo-3} {a-pc} {t-sub-fargo-3} A {p-sub-fargo-5}
s {a-pc}.rp{t-sub-fargo-3} 2
#$discft {p-sub-fargo-3}
$dummy-exclude {p-sub-fargo-2} {p-sub-discft} -{a-discft1},{a-discft2},{a-discft3}
$dummy-exclude {p-sub-fargo-3} {p-sub-fargo-4} -{a-discft1},{a-discft2},{a-discft3}

# Select new function table and update PC
$sendc {p-sub-fargo-5} {a-newpc} {t-sub-fargo-5} A {p-sub-fargo-7}
s {a-newpc}.rp{t-sub-fargo-5} 2
#$discft {p-sub-fargo-5}
$manual-dummy {p-sub-fargo-4} a16 {t-sub-fargo-4} 1 {p-sub-discft}
#$loadpc {p-sub-fargo-5}
$manual-dummy {p-sub-fargo-4} a17 {t-sub-fargo-4} 1 {p-loadpc}
$dummy-delay-exclude {p-sub-fargo-4} 3 {p-sub-fargo-7} -{a-discft1},{a-discft2},{a-discft3}

# XXX while we could restore newpc from ex in parallel with p-fetchline,
# don't because t's are limited.
#$pulseamp {p-sub-fargo-7} {p-fetchline}
#$storeex {p-sub-fargo-7}
$sendc {p-sub-fargo-7} {a-ex} {t-sub-fargo-6} A {p-fetchline}
$recx {p-sub-fargo-7} {a-newpc} {r-sub-fargo-7} {i-main}

endif # SUB_FARGO



# - JMP XXXX -
if OP_JMPFAR

$fargo {p-opjmpfar}
$c-dummy {p-opjmpfar} {p-opjmpfar-2}

# Set new PC from IR
$assert {p-opjmpfar-2} {a-ir}~Pxxxxxxxxxx
$send {p-opjmpfar-2} {a-ir} {t-opjmpfar-2} A {p-opjmpfar-3}

# Preserve return address from PC
$recx {p-opjmpfar-3} {a-newpc} {r-opjmpfar-3} {i-keep-r}

endif # OP_JMPFAR


# - JSR XXXX -
if OP_JSR

$fargo {p-opjsr}
#$dummy {p-opjsr} {p-opjsr-2}
$manual-dummy {p-opjsr} {a-rf} {t-opjsr} 1 {p-opjsr-2}

# Set new PC from IR
$assert {p-opjsr-2} {a-ir}~Pxxxxxxxxxx
$send {p-opjsr-2} {a-ir} {t-opjsr-2} A {p-opjsr-3}

# Shift old PC into return address
$recx {p-opjsr-3} {a-newpc} {r-opjsr-3} {i-shiftl4-pc}

endif # OP_JSR


# - RET -
if OP_RET

$fargo {p-opret}
$dummy-delay {p-opret} 2 {p-opret-3}

# Shift return address into new PC
$recx {p-opret-3} {a-newpc} {t-opret-3} {i-shiftr4-pc}

endif # OP_RET


if SUB_DISCJX
# Discriminate for conditional jump, shared by JZ and JIL
# For economy, also shared by FTL, so also triggers ft3
# Continues on to SUB_JX and fetch.
# 1. DISCJX -> EX, clear
# 2. RF -shiftA-> DISCJX, trigger ft2 (and ft3)
# 3. DISCJX -> ft2.arg (and clear), ft3.arg
# 4. wait
# 5. wait
# 6. [ft2.[AB]xxS -> DISCJX]  # sign selected by caller
#    or [ft3.A65 -ftldata-> RF]
# 7. p-sub-jx

# save DISCJX
$sendc {p-sub-discjx} {a-discjx} {t-sub-discjx} A {p-sub-discjx-2}
$loadex {p-sub-discjx}

# RF -shiftA-> DISCJX
$send-rf {p-sub-discjx-2}
$rec {p-sub-discjx-2} {a-discjx} {t-sub-discjx-2} {i-shiftA} {p-sub-discjx-3}

# trigger ft2 and ft3
p {p-sub-discjx-2} f2.{t-sub-discjx}i
s f2.rp{t-sub-discjx} 1
s f2.op{t-sub-discjx} A0
p {p-sub-discjx-2} f3.{t-sub-discjx}i
s f3.rp{t-sub-discjx} 1
# TODO switch to A+2 addressing
s f3.op{t-sub-discjx} A0

# send ft arg
$pulseamp {p-sub-discjx-3} {p-sendc-discjx}

# caller receives ft sign in p-sub-discjx-6
# continue to conditional jump sub in cycle 7
p f2.{t-sub-discjx}o {p-sub-jx}

endif


# - SUB-JX -
if SUB_JX
# Conditional jump sequence, always ends up back at control cycle

# discriminate, and clear to ready DISCJX for restored memory value
# P = not taken, M = taken
#$discriminatec {p-sub-jx} {a-discjx} {d-discjxA} {d-discjxS} {p-sub-jx-not-taken} {p-sub-jx-taken}
$discriminatec-delay-passthru {p-sub-jx} {a-discjx} {d-discjxA} {d-discjxS} 2 {p-sub-jx-2} {p-sub-consume-op} {p-sub-jmp}

# restore discjx regardless of whether branch taken
$storeex {p-sub-jx-2}
$recx {p-sub-jx-2} {a-discjx} {x-sub-jx-2} {i-main}

endif # SUB_JX


# - JN XX -
if OP_JN

# save DISCJX
$pulseamp {p-opjn} {p-sendc-discjx}
$loadex {p-opjn}
$c-dummy {p-opjn} {p-opjn-2}

# RF->DISCJX, this puts sign of A into DISCJX PM
$send-rf {p-opjn-2}
$rec {p-opjn-2} {a-discjx} {t-opjn-2} {i-main} {p-opjn-3}

# conditional jump
p {p-opjn-3} {p-sub-jx}

endif # OP_JN


# - JZ XX -
if OP_JZ
# XXX Note that this treats M00 as P00.  A somewhat insane way to fix M00 might
# be to wire RF PM to discjx i-shiftA.1, but this has unclear electrical
# implications, and would complicate jil.

# reuse discjx sequence
$pulseamp {p-opjz} {p-sub-discjx}
$ft-dummy-exclude {p-opjz} 5 {p-opjz-6} -f2,f3

# receive ft2 sign for jz
$recx {p-opjz-6} {a-discjx} {x-opjz-6} {i-ftjzsign}

endif # OP_JZ


# - JIL XX -
if OP_JIL

# reuse discjx sequence
$m-pulseamp {p-opjil} {p-sub-discjx}
$ft-dummy-exclude {p-opjil} 5 {p-opjil-6} -f2,f3

# receive ft2 sign for jil
$recx {p-opjil-6} {a-discjx} {x-opjil-6} {i-ftjilsign}


endif # OP_JIL


# - FTL -
if OP_FTL
# Shares with DISCJX so it's kind of an honorary jump?

# reuse discjx sequence
$pulseamp {p-opftl} {p-sub-discjx}
$ft-dummy-exclude {p-opftl} 5 {p-opftl-6} -f2,f3

# clear A while waiting for ft data
$manual-dummy {p-opftl} a4 {t-opftl} 3 {p-opftl-4}

# 4. RF -clearA-> DISCJX
$pulseamp {p-opftl-4} {p-sendc-rf}
$recx {p-opftl-4} {a-discjx} {x-opftl-4} {i-clearA}
$c-dummy {p-opftl-4} {p-opftl-5}

# 5. DISCJX -> RF
$pulseamp {p-opftl-5} {p-sendc-discjx}
$pulseamp {p-opftl-5} {p-loadrf}

# receive ft3 data for ftl in RF A
$permute f3.A 0,6,5,0,0,0,0,0,0,0,0 {d-ftldata}
$permute f3.B 11,0,0,0,0,0,0,0,0,0,0 {d-ftldata}
$recx {p-opftl-6} {a-rf} {t-opftl-6} {i-ftldata}

endif # OP_FTL


# - Conditional jump lookup tables -
# PM digits of FT2 are a lookup table for JZ and JIL 
s f2.mpm1 T
s f2.mpm2 T

# jz uses A signs, with 00 -> M, other rows -> P
s f2.RA0S M

# jil uses B signs, with xy -> M when x or y is 0 or 9, otherwise P.
defmacro jil-rank0 x01 x02 x03 x04 x05 x06 x07 x08 x09 x10
  s f2.RB0S $x01
  s f2.RB1S $x02
  s f2.RB2S $x03
  s f2.RB3S $x04
  s f2.RB4S $x05
  s f2.RB5S $x06
  s f2.RB6S $x07
  s f2.RB7S $x08
  s f2.RB8S $x09
  s f2.RB9S $x10
endmacro
defmacro jil-rank rank x01 x02 x03 x04 x05 x06 x07 x08 x09 x10
  s f2.RB$rank0S $x01
  s f2.RB$rank1S $x02
  s f2.RB$rank2S $x03
  s f2.RB$rank3S $x04
  s f2.RB$rank4S $x05
  s f2.RB$rank5S $x06
  s f2.RB$rank6S $x07
  s f2.RB$rank7S $x08
  s f2.RB$rank8S $x09
  s f2.RB$rank9S $x10
endmacro

# This looks like a chessboard with borders, because it is
$jil-rank0  M M M M M M M M M M
$jil-rank 1 M P P P P P P P P M
$jil-rank 2 M P P P P P P P P M
$jil-rank 3 M P P P P P P P P M
$jil-rank 4 M P P P P P P P P M
$jil-rank 5 M P P P P P P P P M
$jil-rank 6 M P P P P P P P P M
$jil-rank 7 M P P P P P P P P M
$jil-rank 8 M P P P P P P P P M
$jil-rank 9 M M M M M M M M M M
