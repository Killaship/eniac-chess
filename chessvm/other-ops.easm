# -- Other opcodes --
# Implements SWAPALL, LODIG, SWAPDIG, PRINT, READ, FTL, HALT


# - SUB_RFTMP_TO_RF -
# Shared program to end SWAPALL, SWAPDIG, LODIG
# 1. RFTMP -> RF
# 2. EX -> RFTMP 	via SUB_EX_TO_RFTMP

$sendc {p-sub-rftmp-to-rf} {a-rftmp} {t-sub-rftmp-to-rf} A {p-sub-ex-to-rftmp}
$loadrf {p-sub-rftmp-to-rf}


# - SWAPALL -
if OP_SWAPALL
# Exchange RF and LS through RFTMP (RF may be negative).
# 1. RFTMP -> EX
# 2. LS -> RFTMP
# 3. RF -> LS
# 4. RFTMP -> RF   		via SUB_RFTMP_TO_RF
# 5. EX -> RFTMP 		via SUB_RFTMP_TO_RF

# trigger fetch via ft dummy to save final ts
$ft-dummy {p-opswapall} 5 {p-fetch}

# RFTMP -> EX
$m-pulseamp {p-opswapall} {p-sendc-rftmp}
$loadex {p-opswapall}
$c-dummy {p-opswapall} {p-opswapall-2}

# LS -> RFTMP
$pulseamp {p-opswapall-2} {p-sendcls}
$rec {p-opswapall-2} {a-rftmp} {t-opswapall-2} {i-main} {p-opswapall-3}

# RF -> LS
$sendc-rf {p-opswapall-3}
$pulseamp {p-opswapall-3} {p-recls}

# RFTMP -> RF, EX -> RFTMP
$dummy {p-opswapall-3} {p-sub-rftmp-to-rf}

endif # OP_SWAPALL


# - SUB_DIG -
if SUB_DIG
# Shared code for LODIG, SWAPDIG
#    SUB_DIG		LODIG 					SWAPDIG
# 1. RFTMP -> EX
# 2. RF ->  		-i-lodig-> RFTMP 		-i-swapdig-> RFTMP
# 3. RFTMP -> RF
# 4. EX -> RFTMP

# trigger fetch via ft dummy to save final ts
$ft-dummy {p-sub-dig} 5 {p-fetch}

# RFTMP -> EX
$pulseamp {p-sub-dig} {p-sendc-rftmp}
$loadex {p-sub-dig}
$i-dummy {p-sub-dig} {p-sub-dig-2}  # use i-dummy as lodig/subdig using c-dummy here

# RF ->
$pulseamp {p-sub-dig-2} {p-sendc-rf}

# RFTMP -> RF, EX -> RFTMP
$c-dummy {p-sub-dig-2} {p-sub-rftmp-to-rf}  

endif # SUB_DIG


# - LODIG -
if OP_LODIG

$m-pulseamp {p-oplodig} {p-sub-dig}
$c-dummy {p-oplodig} {p-oplodig-2}
$recx {p-oplodig-2} {a-rftmp} {x-oplodig-2} {i-lodig}

endif


# - SWAPDIG -
if OP_SWAPDIG

$m-pulseamp {p-opswapdig} {p-sub-dig}
$c-dummy {p-opswapdig} {p-opswapdig-2}
$recx {p-opswapdig-2} {a-rftmp} {x-opswapdig-2} {i-swapdig}

endif


# - PRINT - 
if OP_PRINT

p {p-opprint} i.pi

# prints high half accumulator 13
s pr.2 P
s pr.pm1 2,1
s pr.pm2 2,2
s pr.pm3 2,3
s pr.pm4 2,4

p i.po {p-fetch}

endif # OP_PRINT


# - READ -
if OP_READ

# read in a new card into constant transmitter
# (the assembler will make sure LS is clear)
p {p-opread} i.Ri
#$dummy {p-opread} {p-opread-2}
$manual-dummy {p-opread} a4 {t-opread} 1 {p-opread-2}

# wait for card to read
p {p-opread-2} i.Rl

# when data is ready, read Al into LS (FFGGH)
# XXX It'd make sense to read 10 digits and replace LS, but ct output wiring
# crosses over the right 5 digits to the left 5 so that we can get four
# constants out of JK switches.  If we were willing to rely on initializing
# constants from a card at reset time, we could get rid of that hack and be
# able to read 10 digits at once here.
p i.Ro {p-opread-3}
$manual-dummy {p-opread-3} a19 {t-opread-3} 1 {p-opread-4}
$manual-dummy {p-opread-3} a20 {t-opread-3} 1 {p-recls}
p {p-opread-4} c.1i
s c.s1 Al
p c.1o {p-fetch}

endif


# - FTL -
if OP_FTL

# 1. save FTL
$sendc {p-opftl} {a-ftl} {t-opftl} A {p-opftl-2}
$loadex {p-opftl}

# 2. RF -shiftA-> FTL
$send-rf {p-opftl-2}
$recx {p-opftl-2} {a-ftl} {x-opftl-2} {i-shiftA}

p {p-opftl-2} f3.{t-opftl-2}i
s f3.rp{t-opftl-2} 1
# TODO switch to A+2 addressing
s f3.op{t-opftl-2} A0
s f3.cl{t-opftl-2} NC

# 3. send FTL argument
$sendc f3.NC {a-ftl} {t-opftl-3} A {p-opftl-4}

# 4. RF -clearA-> FTL
$pulseamp {p-opftl-4} {p-sendc-rf}
$recx {p-opftl-4} {a-ftl} {x-opftl-4} {i-clearA}
$c-dummy {p-opftl-4} {p-opftl-5}

# 5. FTL -> RF
$sendcx {p-opftl-5} {a-ftl} {x-opftl-5} A
$pulseamp {p-opftl-5} {p-loadrf}

# 6. receive ft3 data for ftl in RF A
$ft-dummy-exclude {p-opftl} 5 {p-opftl-6} -f3
$permute f3.A 0,6,5,0,0,0,0,0,0,0,0 {d-ftldata}
$permute f3.B 11,0,0,0,0,0,0,0,0,0,0 {d-ftldata}
$rec {p-opftl-6} {a-rf} {t-opftl-6} {i-ftldata} {p-opftl-7}

# 7. restore FTL
#$storeex {p-opftl-7}
p f3.{t-opftl-2}o {p-storeex}
$rec {p-opftl-7} {a-ftl} {t-opftl-7} {i-main} {p-fetch}

endif # OP_FTL


# - HALT -
# Wire halt to quit the simulator so we can run programs and exit when they're
# done.
# p {p-op95} debug.quit
