# -- Other opcodes --
# Implements SWAPALL, LODIG, SWAPDIG, PRINT, READ, HALT


# - SUB_EX_TO_RFTMP -
# Single-cycle shared program to end ADD, SWAPALL, SWAPDIG, LODIG

$storeex {p-sub-ex-to-rftmp}
$recx {p-sub-ex-to-rftmp} {a-rftmp} {x-sub-ex-to-rftmp} {i-main}


# - SWAPALL -
if OP_SWAPALL
# Exchange RF and LS through RFTMP (RF may be negative).

# trigger fetch via ft dummy to save final ts
$ft-dummy {p-opswapall} 5 {p-fetch}

# RFTMP -> EX
$m-pulseamp {p-opswapall} {p-sendc-rftmp}
$loadex {p-opswapall}
$c-dummy {p-opswapall} {p-opswapall-2}

# RF -> RFTMP, clear
$sendc-rf {p-opswapall-2}
$rec {p-opswapall-2} {a-rftmp} {t-opswapall-2} {i-main} {p-opswapall-3}

# LS -> RF, clear
$pulseamp {p-opswapall-3} {p-sendcls}
$loadrf {p-opswapall-3}
$dummy {p-opswapall-3} {p-opswapall-4}

# RFTMP -> LS, EX -> RFTMP
$sendc {p-opswapall-4} {a-rftmp} {t-opswapall-4} A {p-sub-ex-to-rftmp}
$pulseamp {p-opswapall-4} {p-recls}

endif # OP_SWAPALL


# - LODIG -

# trigger fetch via ft dummy to save final ts
$ft-dummy {p-oplodig} 5 {p-fetch}

# RFTMP -> EX
$m-pulseamp {p-oplodig} {p-sendc-rftmp}
$loadex {p-oplodig}
$c-dummy {p-oplodig} {p-oplodig-2}

# RF -lodig-> RFTMP
$pulseamp {p-oplodig-2} {p-sendc-rf}
$rec {p-oplodig-2} {a-rftmp} {t-oplodig-2} {i-lodig} {p-oplodig-3}

# RFTMP -> RF
$pulseamp {p-oplodig-3} {p-sendc-rftmp}
$pulseamp {p-oplodig-3} {p-loadrf}
 
# EX -> RFTMP
$c-dummy {p-oplodig-3} {p-sub-ex-to-rftmp}


# - PRINT - 
if OP_PRINT

p {p-opprint} i.pi

# prints high half accumulator 13
s pr.2 P
s pr.pm1 2,1
s pr.pm2 2,2
s pr.pm3 2,3
s pr.pm4 2,4

p i.po {p-fetch}

endif # OP_PRINT


# - READ -
if OP_READ

# read in a new card into constant transmitter
# (the assembler will make sure LS is clear)
p {p-opread} i.Ri
$dummy {p-opread} {p-opread-2}

# wait for card to read
p {p-opread-2} i.Rl

# when data is ready, read Al into LS (FFGGH)
# XXX It'd make sense to read 10 digits and replace LS, but ct output wiring
# crosses over the right 5 digits to the left 5 so that we can get four
# constants out of JK switches.  If we were willing to rely on initializing
# constants from a card at reset time, we could get rid of that hack and be
# able to read 10 digits at once here.
p i.Ro {p-opread-3}
$manual-dummy {p-opread-3} a19 {t-opread-3} 1 {p-opread-4}
$manual-dummy {p-opread-3} a20 {t-opread-3} 1 {p-recls}
p {p-opread-4} c.1i
s c.s1 Al
p c.1o {p-fetch}

endif


# - HALT -
# Wire halt to quit the simulator so we can run programs and exit when they're
# done.
# p {p-op95} debug.quit
