# -- ACCUMULATOR LAYOUT --
# Defines all accumulators and patches to and from data trunks
# That patching encodes the possible permutations on acc inputs and outputs,
# as well as digit-to-program triggers for discrimination and 1-of-N decoding.
# Listed centrally here to make it easier to track allocation.

# Main data bus, used for most transfers
{d-main}=1

# macro to setup main bus connections - no "a-" before acc
defmacro acc-main acc
  p {a-$acc}.A {d-main}
  p {d-main} {a-$acc}.{i-main}
endmacro

# main bus connections for acc used for discrimination. We need to remove sign,
# and create another bus for the S output. Otherwise any sign pulse on d-main would
# trigger one of our discrimination programs. 
defmacro acc-disc-main acc
  p {a-$acc}.A {d-$accA}
  $permute {d-$accA} 0,10,9,8,7,6,5,4,3,2,1 {d-main}
  p {a-$acc}.S {d-$accS}

  p {d-main} {a-$acc}.{i-main}
endmacro

# Define a permuted input for an accumulator
defmacro permuted-input acc bus input permutation
  p $bus ad.permute.{ad-%name}
  s ad.permute.{ad-%name} $permutation
  p ad.permute.{ad-%name} $acc.$input
endmacro


# - Program counter -
# Layout: SS RRRR PPPP
# Current program counter PPPP and return address RRRR, plus a temp SS used for op decode
# Four digit address is FFLL: FF = which ft (09=ft1, 90=ft2, 99=ft3), LL = ft line

{a-pc}=a1
$acc-main pc

# A - mp steppers, op<=55
# S - mp steppers, op>55
# Decode needs the digits of the SS field to be swapped.
p {a-pc}.S ad.permute.{ad-swap-pc-ss-digits}
s ad.permute.{ad-swap-pc-ss-digits} 11,9,10,8,7,6,5,4,3,2,1
p ad.permute.{ad-swap-pc-ss-digits} {d-main}

# shiftl8 input: XX XX XX XX I1 -> I1 00 00 00 00, used in control cycle
p {d-main} ad.s.{ad-pc-shiftl8}.8
p ad.s.{ad-pc-shiftl8}.8 {a-pc}.{i-shiftl8}

# clear A input: XX RRRR PPPP -> 00 RRRR PPPP, wired to EX.S for control cycle
$permuted-input {a-pc} {d-exS} {i-exS-clearA} 0,0,0,8,7,6,5,4,3,2,1

# loadPC2: SS RRRR PPPP -> 00 0000 00PP, used for JMP/JN/JZ/JIL
p {d-main} ad.d.{ad-pc-loadPC2}.-8
p ad.d.{ad-pc-loadPC2}.-8 {a-pc}.{i-loadPC2}

# fetch input: from d-fetch-i1, used for loading I1 into SS field
p {d-fetch-i1} {a-pc}.{i-fetch-i1}

# shared programs
$recx {p-loadpc} {a-pc} {r-loadpc} {i-main}

# helper macros
defmacro loadpc prog
  $pulseamp $prog {p-loadpc}
endmacro


# - Instruction Register -
# Layout: P I6 I5 I4 I3 I2
# Holds up to 5 instructions queued to execute after loading from a function
# table line. Fills in 99 from the left as instructions are executed. When empty, 
# this will be 9999999999 and then +1 flips to M0, easy to detect
# So we use the sign of IR to decide whether we need to fetch (discriminate on IR)

{a-ir}=a2
$acc-disc-main ir

# fetch from d-fetch-12, used for loading new line of instructions 
# permuted from function tables 1 and 2
p {d-fetch-12} {a-ir}.{i-fetch-12}

# fetch from d-fetch-3, used for loading new line of instructions 
# permuted from function table 3
p {d-fetch-3} {a-ir}.{i-fetch-3}

# fill99 input: replace top 2 digits of IR with 99, clear P/M
# the 99 comes from a constant M00000, the rest from EX sent on main
$permuted-input {a-ir} {d-main} {i-fill99} 0,11,11,8,7,6,5,4,3,2,1


# - Execution Register -
# Empty at the beginning of every opcode program
# Typically the only temp space in the machine, so used extensively to save
# contents of other accumulators while they are used functionally
# Also used to disc opcode >55

{a-ex}=a3
$acc-disc-main ex

# rotate-ir input: I5 I4 I3 I2 I1 -> I1 I5 I4 I3 I2 for control cycle
# Shift the instructions right, then we execute and clear I1, removing one from the queue
$permuted-input {a-ex} {d-main} {i-rotate-ir} 11,2,1,10,9,8,7,6,5,4,3

# clearA input: S aa bb cc dd ee -> 0 00 bb cc dd ee, used in control cycle and MOV
$permuted-input {a-ex} {d-main} {i-clearA} 0,0,0,8,7,6,5,4,3,2,1

# clearPC2: SS RRRR PPPP -> SS RRRR PP00, used for JMP/JN/JZ/JIL
$permuted-input {a-ex} {d-main} {i-clearPC2} 11,10,9,8,7,6,5,4,3,0,0

# fetch input: from d-fetch-i1, used for loading I1 into left two digits
p {d-fetch-i1} {a-ex}.{i-fetch-i1}

# shared programs
$recx {p-loadex} {a-ex} {r-loadex} {i-main}
$recx {p-loadex-clearA} {a-ex} {r-loadex-clearA} {i-clearA}
# EX.PM must be P for storeex or we will misfire opcode discrimination
$assert {p-storeex} {a-ex}~Pxxxxxxxxxx
$sendcx {p-storeex} {a-ex} {t-storeex} A

# load EX from main
defmacro loadex prog
  $pulseamp $prog {p-loadex}
endmacro

# loads EX with A field (sign=P, digits 10 and 9) clear
defmacro loadex-clearA prog
  $pulseamp $prog {p-loadex-clearA}
endmacro

# sends EX to main and clears
defmacro storeex prog
  $pulseamp $prog {p-storeex}
endmacro


# - Register File -
# Registers A-E of the virtual machine. A is our accumulator.
{a-rf}=a4
$acc-main rf

# RF.S is used to negate fields of RF for arithmetic.  Discard sign to avoid
# setting EX.PM to M, which might misfire discrimination.  A 1'p on digit 1
# might cause the E field to carry into D; we don't need -E so just don't
# connect digit 1.
p {a-rf}.S ad.permute.{ad-drop-rf-sign}
s ad.permute.{ad-drop-rf-sign} 0,10,9,8,7,6,5,4,3,2,0
p ad.permute.{ad-drop-rf-sign} {d-main}

# i-selectA input: aa 00 XX XX XX -> aa 00 00 00 00
$permuted-input {a-rf} {d-main} {i-selectA} 0,10,9,0,0,0,0,0,0,0,0

# i-selDA input: XX XX XX aa XX -> aa 00 00 00 00, used for MOV DI,A
$permuted-input {a-rf} {d-main} {i-selDA} 0,4,3,0,0,0,0,0,0,0,0

# i-selEA input: XX XX XX XX aa -> aa 00 00 00 00, used for MOV EJ,A/MOV #X,A
$permuted-input {a-rf} {d-main} {i-selEA} 0,2,1,0,0,0,0,0,0,0,0

# i-ftldata input: XX XX XX dd XX, used for FTL
p {d-ftldata} {a-rf}.{i-ftldata}

# shared programs
$recx {p-rf-selDA} {a-rf} {r-rf-selDA} {i-selDA}
$recx {p-rf-selEA} {a-rf} {r-rf-selEA} {i-selEA}
$sendx {p-send-rf} {a-rf} {t-send-rf} A
$sendcx {p-sendc-rf} {a-rf} {t-sendc-rf} A
$recx {p-loadrf} {a-rf} {r-loadrf} {i-main}

# helper macros
# receive rf from main
defmacro loadrf prog
  $pulseamp $prog {p-loadrf}
endmacro

# send rf on main
defmacro send-rf prog
  $pulseamp $prog {p-send-rf}
endmacro

# send rf on main and clear
defmacro sendc-rf prog
  $pulseamp $prog {p-sendc-rf}
endmacro


# - Load/Store -
# Registers F-J of the virtual machine. 
{a-ls}=a5
$acc-main ls

# Load only the sign. used in STOREACC to preserve DISCFT acc signs
$permuted-input {a-ls} {d-main} {i-signonly} 11,0,0,0,0,0,0,0,0,0,0

# shared clear LS program, used for READ, LOADACC and LOADWORD
# use with pulseamp or dummy
$clearx {p-clearls} {a-ls} {r-clear}


# - MEM0 -
# Discriminate memory cycle 0-9 vs. 10-14
{a-mem0}=a6
{a-discmemcyc}=a6
$acc-disc-main discmemcyc

# drop sign, used to clear LS sign in STOREACC
$permuted-input {a-discmemcyc} {d-main} {i-dropsign} 0,10,9,8,7,6,5,4,3,2,1

# Acc index for LOADACC/STOREACC: 9 XX XX XX XX A2A1 -> A2 90 00 00 00 0A1
# A2 in sign to discriminate 0-9 vs 1014, A1 in low digit to send to FT
# Also need a 9 in digit 10 so a-discmemcyc.S does not clash on d-main
$permute {d-main} 10,11,0,0,0,0,0,0,0,0,9 {a-discmemcyc}.{i-splitA}

# Double B into high digits, to compute acc index for LOADWORD
# X XX B2B1 XX XX XX XX -> 0 B2B1 00 00 00 00
$permute {d-main} 0,8,7,0,0,0,0,0,0,0,0 {a-discmemcyc}.{i-accidxB}


# - MEM1 -
# Trigger mem cycle 10-14 on S outputs
{a-mem1}=a7
{a-memcyc1014}=a7
$acc-main mem1

p {a-memcyc1014}.S {d-memcyc1014S}

# i-ftselacc: get 10 digits from FT, for loadacc/storeacc
p {d-ftselacc} {a-memcyc1014}.{i-ftselacc}


# - MEM2 -
# Trigger MOV [FGHIJ],A on S outputs for LOADWORD
{a-mem2}=a8
{a-loadword}=a8
$acc-main mem2

p {a-loadword}.S {d-loadword}

# Move second digit of B into digit 1, to compute word index
# X A2A1 XX XX XX XX -> 0 00 00 00 00 0A1
$permuted-input {a-loadword} {d-main} {i-windexB} 0,0,0,0,0,0,0,0,0,0,7

# i-ftselacc: get 10 digits from FT
p {d-ftselacc} {a-loadword}.{i-ftselacc}


# - MEM3 -
# MEM3 is used as a temporary for ops involving RF which can be negative, so it
# must not have any discrimination programs.
{a-mem3}=a9
{a-rftmp}=a9
$acc-main mem3


# - MEM4 -
# Trigger MOV A,[FGHIJ] sequences on S outputs for STOREWORD
{a-mem4}=a10
{a-storeword}=a10
$acc-main mem4

# Move second digit of B into digit 1, to compute word index
# X A2A1 XX XX XX XX -> 0 00 00 00 00 0A1
$permuted-input {a-storeword} {d-main} {i-windexB} 0,0,0,0,0,0,0,0,0,0,7

# i-ftselacc: get 10 digits from FT
p {d-ftselacc} {a-storeword}.{i-ftselacc}


# - MEM5 -
{a-mem5}=a11
$acc-main mem5


# - MEM6 -
# Programs to compute new PC for JMP FAR/JSR/RET.
{a-mem6}=a12
{a-newpc}=a12

$acc-main mem6

# extract-pc input: XX XXXX PPPP -> 00 0000 PPPP
$permuted-input {a-newpc} {d-main} {i-extract-pc} 0,0,0,0,0,0,0,4,3,2,1

# keep-r input: XX RRRR XXXX -> 00 RRRR 0000
$permuted-input {a-newpc} {d-main} {i-keep-r} 0,0,0,8,7,6,5,0,0,0,0

# shiftr4-pc input: shift XX RRRR PPPP to 00 0000 RRRR, for RET
$permuted-input {a-newpc} {d-main} {i-shiftr4-pc} 0,0,0,0,0,0,0,8,7,6,5

# shiftl4-pc input: shift XX XXXX PPPP to XX PPPP 0000, for JSR
$permuted-input {a-newpc} {d-main} {i-shiftl4-pc} 0,0,0,4,3,2,1,0,0,0,0


# - MEM7 - 
# MEM7 is a13 and is used for printing, has an input that shifts AB into printing position
{a-mem7}=a13
{a-print}=a13
$acc-main mem7

$permuted-input {a-print} {d-main} {i-printAB} 11,0,10,9,8,7,0,0,0,0,0


# - MEM8 -
{a-mem8}=a14
$acc-main mem8


# - MEM9 -
# Used for JN/JZ/JIL
{a-mem9}=a15
{a-discjx}=a15
$acc-disc-main discjx

# i-shiftA: Used to shift RF A into digits 1+2 for ft arg
$permuted-input {a-discjx} {d-main} {i-shiftA} 0,0,0,0,0,0,0,0,0,10,9

# i-ftjzsign: get sign for jz discrimination
p f2.A ad.permute.{ad-ftjzsign}
s ad.permute.{ad-ftjzsign} 11,0,0,0,0,0,0,0,0,0,0
p ad.permute.{ad-ftjzsign} {d-ftjzsign}
p {d-ftjzsign} {a-discjx}.{i-ftjzsign}

# i-ftjilsign: get sign for jil discrimination
p f2.B ad.permute.{ad-ftjilsign}
s ad.permute.{ad-ftjilsign} 11,0,0,0,0,0,0,0,0,0,0
p ad.permute.{ad-ftjilsign} {d-ftjilsign}
p {d-ftjilsign} {a-discjx}.{i-ftjilsign}


# - MEM10 -
# Trigger mem cycle 0-9 on S outputs
{a-mem10}=a16
{a-memcyc09}=a16
$acc-main mem10

p {a-memcyc09}.S {d-memcyc09S}

# i-ftselacc: get 10 digits from FT, for loadacc/storeacc
p {d-ftselacc} {a-memcyc09}.{i-ftselacc}


# - MEM11 -
{a-mem11}=a17
{a-movswap}=a17
$acc-main mem11

$permuted-input {a-movswap} {d-main} {i-movAB} 11,8,7,10,9,6,5,4,3,2,1

$permuted-input {a-movswap} {d-main} {i-movAC} 11,6,5,8,7,10,9,4,3,2,1

$permuted-input {a-movswap} {d-main} {i-movAD} 11,4,3,8,7,6,5,10,9,2,1

$permuted-input {a-movswap} {d-main} {i-movAE} 11,2,1,8,7,6,5,4,3,10,9


# - MEM12 -
{a-mem12}=a18
{a-discft1}=a18

$acc-main mem12


# - MEM13 -
{a-mem13}=a19
{a-discft2}=a19

$acc-main mem13


# - MEM14 -
{a-mem14}=a20
{a-discft3}=a20

$acc-main mem14


# - Function tables -
# Not accumulators, but they have some global wiring that is shared

p {d-main} f1.arg  # only bottom two digit lines connect so no deleter is required
p {d-main} f2.arg
p {d-main} f3.arg


