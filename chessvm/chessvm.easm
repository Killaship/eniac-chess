# ENIAC-VM for playing chess
# Jonathan Stray and Jered Wierzbicki
# created 2020-3-30 
#
# This is the setup that turns the ENIAC into a CPU: fetch, decode, execute,
# and implements all the opcodes. The control cycle design is adapted from 
# "Central Control for ENIAC", Adele Goldstine, 1947
#
# This file assembles with easm to a .e file suitable for use with the ENIAC simulator,
# after appending the function table switch settings which contain the chess code.


# -- CONFIGURATION -- 
# Flags used for debugging and resource accounting

disable PRELOAD_MEMORY
if PRELOAD_MEMORY
# memory values to check that various instructions save and restore
set a4  0404040404
set a5  9988776655  
set a6  0616263646
set a7  0717273747
set a8  0808080808
set a9  0909090909
set a10 1010101010
set a11 1111111111
set a12 1212121212 
set a13 8806000000
set a14 1414141414
set a15 1515151515
set a16 1616161616
set a17 1717171717
#set a18 1818181818    can't do this, used to construct reset PC
set a19 1919191919
set a20 2020202020  
endif

# use 'enable' or 'disable' to condition assembly of the corresponding sequence
# - base (11 pas, 20 ts)
enable RESET_SEQUENCE #  2 pas,  2 ts
enable CONTROL_CYCLE  #  9 pas, 18 ts
# - memory (13 pas, 54 ts)
enable OP_LOADACC     #  1 pas,  1 ts
enable OP_STOREACC    #  1 pas,  5 ts
enable OP_LOADWORD   
enable OP_STOREWORD   
enable ACC_MEMCYC
enable SUB_MEMCYC     
enable LOADWORD_DUMMIES
enable STOREWORD_DUMMIES
enable OP_SWAPALL     #  4 pas,  6 ts
# - word access (14 pas, 28 ts)
enable OP_SWAP        #  7 pas,  8 ts
enable OP_MOVXA       #  5 pas, 14 ts
enable SUB_MOVSWAP    #  2 pas,  6 ts (OP_SWAP, OP_MOVXA)
# - arithmetic (15 pas, 9 ts)
enable OP_MOVIMMA     #  3 pas,  1 ts
enable OP_INC         #  0 pas,  0 ts
enable OP_DEC         #  1 pas,  0 ts
enable OP_ADD         #  4 pas,  4 ts
enable OP_ADDIMMA     #  ? pas,  ? ts (also required for OP_MOVIMMA)
enable OP_SUB         #  6 pas,  3 ts
enable OP_CLRA        #  1 pas,  1 ts
# - control flow (19 pas, 26 ts)
enable OP_JMPFAR      #  1 pas,  2 ts
enable OP_JSR         #  1 pas,  2 ts
enable OP_RET         #  1 pas,  2 ts
enable OP_JMP         #  0 pas,  0 ts
enable OP_JN          #  2 pas,  2 ts
enable OP_JZ          #  1 pas,  1 ts
enable OP_JIL         #  1 pas,  1 ts
enable OP_FTL         #  1 pas,  1 ts
enable SUB_DISCJX     #  2 pas,  2 ts (OP_JZ, OP_JIL, OP_FTL)
enable SUB_JX         #  3 pas,  5 ts (OP_JN, OP_JZ, OP_JIL)
enable SUB_JMP        #  1 pas,  4 ts (OP_JMP, SUB_JX)
enable SUB_FARGO      #  6 pas,  4 ts (OP_JMPFAR, OP_JSR, OP_RET)
enable SUB_DISCFT     #  0 pas,  1 ts (SUB_FARGO)
# - misc (8 pas, 13 ts)
enable OP_PRINT       #  0 pas,  0 ts
enable OP_READ        #  0 pas,  2 ts
enable SUB_CONSUME_OP #  2 pas,  3 ts (OP_MOVIMMA, SUB_JX)
enable SUB_CLEARA     #  3 pas,  1 ts (OP_MOVXA, OP_CLRA, OP_MOVIMMA)
# loadpc              #  0 pas,  0 ts
# loadex              #  0 pas,  0 ts
# loadex-clearA       #  0 pas,  0 ts
# storeex             #  0 pas,  1 ts
# rf-selDA            #  0 pas,  0 ts
# rf-selEA            #  0 pas,  0 ts
# send-rf             #  0 pas,  1 ts
# sendc-rf            #  0 pas,  1 ts
# loadrf              #  0 pas,  0 ts


# -- VM IMPLEMENTATION --

include macros.easm
include accumulators.easm
include constants.easm
include control-cycle.easm
include opcodes.easm
include arithmetic.easm
include jumps.easm
include memory.easm
include movswap.easm
include other-ops.easm

# Allocate dummies after other all other accumulator programs are configured.
insert-deferred


# -- CURRENT PROGRAM --

# What are we running today?
disable TEST
disable TIC
enable C4
disable CHESS

if TEST
include vmtest.e
f r asm/vmtest.deck
endif

if TIC
# To run tic tac toe enable TIC and use runtic.py
include tic.e
endif

if C4
# To run connect 4 enable C4 and use runc4.py
include c4.e
f r /tmp/c4.card
endif

if CHESS
include chess.e
f r asm/chess.deck
endif

# Start the machine
b i
s cy.op 1a

