# -- MOVs and SWAPs --
# We use a fairly complex factoring of MOV and SWAP ops, designed to minimize
# transceiver usage by sharing as much code as possible. The cost is execution time.


# - MOVSWAP -
if SUB_MOVSWAP
# 1. MOVSWAP -> EX
# 2. nop          [ (RF or LS) -mov[BCDE]-> MOVSWAP ]
# 3. send MOVSWAP [ MOVSWAP -selectA-> RF  or  MOVSWAP -> RF ]
# 4. EX -> MOVSWAP, goto fetch
defmacro movswap prog
  $pulseamp $prog {p-sub-movswap}
endmacro

# Save movswap
$sendcx {p-sub-movswap} {a-movswap} {t-sub-movswap} A
$loadex {p-sub-movswap}
$manual-dummy {p-sub-movswap} a18 {t-sub-movswap} 2 {p-sub-movswap-3}

# Get desired field of RF or LS in A position
# (not shared)

# Update RF
$sendc {p-sub-movswap-3} {a-movswap} {t-sub-movswap-3} A {p-sub-movswap-4}

# Restore movswap and go to fetch
$storeex {p-sub-movswap-4}
$rec {p-sub-movswap-4} {a-movswap} {t-sub-movswap-4} {i-main} {p-fetch}


# shared programs -- each is used for both RF and LS operations
$recx {p-movswapAA} {a-movswap} {t-movswapAA} {i-main}
$recx {p-movswapAB} {a-movswap} {r-movswapAB} {i-movAB}
$recx {p-movswapAC} {a-movswap} {r-movswapAC} {i-movAC}
$recx {p-movswapAD} {a-movswap} {r-movswapAD} {i-movAD}
$recx {p-movswapAE} {a-movswap} {t-movswapAE} {i-movAE}

endif # SUB_MOVSWAP


# - MOV [BCDEFGHIJ],A -
if OP_MOVXA
# 1. $clearA-1
# 2. $clearA-2
# 3. (wait)
# 4. (wait)
# 5. MOVSWAP -> EX
# 6. (RF or LS) -mov[BCDE]-> MOVSWAP
# 7. MOVSWAP -selectA-> RF
# 8. EX -> MOVSWAP

# All mov opcodes for A with RF are encoded as 2x, and all mov opcodes for A
# with LS are encoded as 3x to conserve pulse amplifiers.
$c-dummy p.A3o {p-opmovXA}
$c-dummy p.A4o {p-opmovXA}

# Trigger the appropriate movswap program in 6 cycles with a multiplier dummy.
# These dummies also select the RF or LS specific part of the mov operation by
# using the A or S product disposal program.
$m-dummy-then-pulseamp {p-opmovBA} 6 {p-movswapAB} A
$m-dummy-then-pulseamp {p-opmovCA} 6 {p-movswapAC} A
$m-dummy-then-pulseamp {p-opmovDA} 6 {p-movswapAD} A
$m-dummy-then-pulseamp {p-opmovEA} 6 {p-movswapAE} A
$m-dummy-then-pulseamp {p-opmovFA} 6 {p-movswapAA} S
$m-dummy-then-pulseamp {p-opmovGA} 6 {p-movswapAB} S
$m-dummy-then-pulseamp {p-opmovHA} 6 {p-movswapAC} S
$m-dummy-then-pulseamp {p-opmovIA} 6 {p-movswapAD} S
$m-dummy-then-pulseamp {p-opmovJA} 6 {p-movswapAE} S
p m.A {p-send-rf}
p m.S {p-sendls}

# clear A
$clearA {p-opmovXA}

# dummies to invoke movswap and receive modified RF
$manual-dummy {p-opmovXA} a19 {t-opmovXA} 5 {p-sub-movswap}
$manual-dummy {p-opmovXA} a20 {t-opmovXA} 7 {p-opmovXA-7}

# Update A in RF
$recx {p-opmovXA-7} {a-rf} {t-opmovXA-7} {i-selectA}

endif # OP_MOVXA


# - SWAP A,[BCDE] -
if OP_SWAP
# Shared sequence with OP_MOVXA
# 1. MOVSWAP -> EX
# 2. (RF) -mov[BCDE]-> MOVSWAP
# 3. MOVSWAP -> RF
# 4. EX -> MOVSWAP

# All swap ops are encoded as 0x to conserve pulse amplifiers.
# This includes clrall which is a swap that doesn't trigger a movswapAX program.
$c-dummy p.A1o {p-opswap}

# Sequence operations that happen for every register
$c-dummy {p-opswap} {p-opswap-2}
$i-dummy {p-opswap-2} {p-opswap-3}

# Sequence operations that happen for each register (only one, so all i-dummy is fine)
$i-dummy {p-opswapAB} {p-movswapAB}
$i-dummy {p-opswapAC} {p-movswapAC}
$i-dummy {p-opswapAD} {p-movswapAD}
$i-dummy {p-opswapAE} {p-movswapAE}

$movswap {p-opswap}

# Swap desired words of RF
$sendc-rf {p-opswap-2}
# dummy triggers p-movswapAX

# Update RF
$loadrf {p-opswap-3}

endif # OP_SWAP
