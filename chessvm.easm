#s cy.op 1a
set a1 0
set a1 0012345678
# XXX test p-nofetch
#set a2 -9394959621  # op=79
#set a2 -9394959626  # op=74
set a2 -9394959697  # op=03
#set a2 -9394959646  # op=54
b i

# ENIAC-VM for playing chess
# created 2020-3-30 by Jonathan Stray
#
# This is the setup that turns the ENIAC into a CPU: fetch, decode, execute,
# and implements all the opcodes. The control cycle design is adapted from 
# "Central Control for ENIAC", Adele Goldstine, 1947
#
# This file assembles with easm to a .e file suitable for use with the ENIAC simulator,
# after appending the function table switch settings which contain the chess code.


# -- MACROS --
# These define a basic language we use to specify "program" steps, 
# in the ENIAC sense of pulse-triggered operations, akin to microcode for the VM.

# RECeive on given input
defmacro rec inpr acc program input outpr
  p $inpr $acc.$programi
  s $acc.op$program $input
  p $acc.$programo $outpr
endmacro

# RECeive and do not (X) emit an output program pulse
defmacro recx inpr acc program input
  p $inpr $acc.$programi
  s $acc.op$program $input
endmacro

# RECeive and INCrement
defmacro recinc inpr acc program input outpr
  p $inpr $acc.$programi
  s $acc.op$program $input
  s $acc.cc$program C
  p $acc.$programo $outpr
endmacro

# RECeive and INCrement and do not (X) emit an output program pulse
defmacro recincx inpr acc program input
  p $inpr $acc.$programi
  s $acc.op$program $input
  s $acc.cc$program C
endmacro

# SEND and do not (X) emit an output program pulse
defmacro sendx inpr acc program AorS 
  p $inpr $acc.$programi
  s $acc.op$program $AorS
endmacro

# SEND and Clear
defmacro sendc inpr acc program AorS outpr
  p $inpr $acc.$programi
  s $acc.op$program $AorS
  s $acc.cc$program C
  p $acc.$programo $outpr
endmacro

# SEND and Clear and do not (X) emit an output program pulse
defmacro sendcx inpr acc program AorS 
  p $inpr $acc.$programi
  s $acc.op$program $AorS
  s $acc.cc$program C
endmacro

# CLEAR accumulator
# triggered on inpr and emitting outpr when done (via transceiver t)
defmacro clear inpr acc program outpr
  p $inpr $acc.$programi
  s $acc.op$program 0
  s $acc.cc$program C
  p $acc.$programo $outpr
endmacro

# CLEAR accumulator and do not (X) emit an output program pulse
defmacro clearx inpr acc t
  p $inpr $acc.$ti
  s $acc.op$t 0
  s $acc.cc$t C
endmacro

# $dummy program definition, with a given delay
defmacro dummy inpr acc t delay outpr
  p {$inpr} $acc.{$t}i
  s $acc.op{$t} 0
  s $acc.rp{$t} $delay
  p $acc.{$t}o {$outpr}
endmacro

# $discriminate
#
# Triggers outp if acc>=0 and outm if acc<0. Works by sending additively and
# subtractively on acc, with S(11) wired to outp and A(11) wired to outm.
#
# Note: any other programs on acc which send additively will trigger outm if
# A(11) is set, so care must be taken that acc is never negative during such
# programs to avoid mistriggering part of the discriminate sequence.
#
#   inp   - input program line
#   acc   - accumulator to wire for discrimination
#   dummy - accumulator to use for dummy programs
#   name  - base for transciever names on acc and dummy
#   dA,dS - data busses to use for acc.A acc.S
#   outp  - program line for acc>=0
#   outm  - program line for acc<0
defmacro discriminate inp acc dummy name dA dS outp outm

  p $inp $acc.{t-$name}i
  s $acc.op{t-$name} AS               

  # acc >= 0 -> outp
  p $dS ad.dp.{ad-disc-$name-S}.11
  p ad.dp.{ad-disc-$name-S}.11 $dummy.{t-$name-S}i
  s $dummy.op{t-$name-S} 0
  p $dummy.{t-$name-S}o $outp

  # acc < 0 -> outm
  p $dA ad.dp.{ad-disc-$name-A}.11
  p ad.dp.{ad-disc-$name-A}.11 $dummy.{t-$name-A}i
  s $dummy.op{t-$name-A} 0
  p $dummy.{t-$name-A}o $outm

endmacro


# -- ACCUMULATOR LAYOUT --
# Defines all accumulators and patches to and from data trunks
# That patching encodes the possible permutations on acc inputs and outputs,
# as well as digit-to-program triggers for discrimination and 1-of-N decoding.
# Listed centrally here to make it easier to track allocation.

# Main data bus, used for most transfers
{d-main}=1

# - Program counter -
# Layout: SS RRRR PPPP
# Current program counter PPPP and return address RRRR, plus a temp SS
# Four digit address is FFLL: FF = which ft (00=ft1, 90=ft2, 99=ft3), LL = ft line

{a-pc}=a1

# A - mp steppers, op<=55
p {a-pc}.A {d-main}
# S - mp steppers, op>55
# Decode needs the digits of the SS field to be swapped.
p {a-pc}.S ad.permute.{ad-swap-pc-ss-digits}
s ad.permute.{ad-swap-pc-ss-digits} 11,9,10,8,7,6,5,4,3,2,1
p ad.permute.{ad-swap-pc-ss-digits} {d-main}

# main input
p {d-main} {a-pc}.{i-main}

# shiftl8-irS input: XX XX XX XX I1 -> I1 00 00 00 00, used in control cycle
p {d-irS} ad.s.{ad-pc-shiftl8-irS}.8
p ad.s.{ad-pc-shiftl8-irS}.8 {a-pc}.{i-shiftl8-irS}

# "no connection" input, used for incrementing PC
p {d-nothing} {a-pc}.{i-nothing} # d-nothing is a workaround, I'd prefer "{a-pc}.{i-nothing}=a"

# XXX replan PC inputs so this fits somehow...
p {d-exS} ad.permute.{ad-exS-clearA}
s ad.permute.{ad-exS-clearA} 0,0,0,8,7,6,5,4,3,2,1
p ad.permute.{ad-exS-clearA} {a-pc}.{i-exS-clearA}

# b - loadim2-irS: I1 XX XX XX XX -> 00 00 00 00 I1, used for JN/JZ/JIL
# g - shiftl4-exA, used for JSR
# d - from FT, in control cycle to load first instruction


# - Instruction Register -
# Layout: M 99-I6 99-I5 99-I4 99-I3 100-I2
# Holds up to 5 instructions queued to execute after loading from a function
# table line. Fills in 99 from the left as instructions are executed. When empty, 
# this will be 9999999999 and then +1 flips to P0, easy to detect
# So we also have a "need to fetch a line" discrimination on IR

{a-ir}=a2

# A(11) - discrimination, A(10-1) main
p {a-ir}.A {d-irA}
p {d-irA} ad.permute.{ad-drop-ir-sign}
s ad.permute.{ad-drop-ir-sign} 0,10,9,8,7,6,5,4,3,2,1
p ad.permute.{ad-drop-ir-sign} {d-main}

# I5 I4 I3 I2 I1 -> I1 I5 I4 I3 I2
# Shift the instructions right, then we execute and clear I1, removing one from the queue
p {d-irA} ad.permute.{ad-irA}
s ad.permute.{ad-irA} 11,2,1,10,9,8,7,6,5,4,3
p ad.permute.{ad-irA} {d-rotate-irA}

# S output to its own bus, unpermuted
p {a-ir}.S {d-irS}

# AS - fetch discriminate

# fetch input: from d-fetch, used for loading new line of instructions permuted from function table
p {d-fetch} {a-ir}.{i-fetch}

# fill99 input: replace top 2 digits with 99 (copy EX.PM, so needs EX.PM = M)
# wiring shenanigans because EX.M is not transmitted on d-main, in practice
# this would just be a special input adapter
p {d-main} ad.permute.{ad-fill99-main-8to1}
p {d-exA} ad.permute.{ad-fill99-exA-sign}
s ad.permute.{ad-fill99-main-8to1} 0,0,0,8,7,6,5,4,3,2,1
s ad.permute.{ad-fill99-exA-sign} 11,11,11,0,0,0,0,0,0,0,0
p ad.permute.{ad-fill99-main-8to1} {a-ir}.{i-fill99}
p ad.permute.{ad-fill99-exA-sign} {a-ir}.{i-fill99}

# d-main input: used to restore top digits to 99 in p-ople55
p {d-main} {a-ir}.{i-main}


# - Execution Register -
# Empty at the beginning of every opcode program
# Typically the only temp space in the machine, so used extensively to save
# contents of other accumulators while they are used functionally
# Also used to disc opcode >55

{a-ex}=a3

# A(11) - discrimination, A(10-1) main
p {a-ex}.A {d-exA}
p {d-exA} ad.permute.{ad-drop-ex-sign}
s ad.permute.{ad-drop-ex-sign} 0,10,9,8,7,6,5,4,3,2,1
p ad.permute.{ad-drop-ex-sign} {d-main}

# S - exS
p {a-ex}.S {d-exS}

# clear A field of main
# XX XX XX XX XX -> 00 XX XX XX XX, used for MOV A,#X and other writes to A
p {d-main} ad.permute.{ad-clearA}
s ad.permute.{ad-clearA} 11,0,0,8,7,6,5,4,3,2,1
p ad.permute.{ad-clearA} {d-clearA}

# main
p {d-main} {a-ex}.{i-main}
# TODO: replan inputs on EX to allow this input?
p {d-rotate-irA} {a-ex}.{i-rotate-irA}
# d - clearA: XX XX XX XX XX -> 00 XX XX XX XX, used for MOV A,#X and other writes to A
p {d-clearA} {a-ex}.{i-clearA}

# g - clearPC2: XX XX XX XX 21 -> XX XX XX XX 00, used for JN/JZ/JIL
# g - clearPC4: XX XX XX 43 21 -> XX XX XX 00 00, used for JMP
# e - shiftl4:  XX YY YY 43 32 -> XX 43 21 00 00, used for JSR


# - Register File -
# Registers A-E of the virtual machine. Use a13 so we can print it.
{a-reg}=a13


# - Load/Store -
# Registers F-J of the virtual machine. 
{a-ls}=a4


# - Setup MP as an opcode decoder -
# Steppers use all 6 positions.
s p.cA 6
s p.cB 6
s p.cC 6
s p.cD 6
s p.cE 6
s p.cF 6
s p.cG 6
s p.cH 6
s p.cJ 6
s p.cK 6

# This switch setting makes eniacsim disable/disassociate MP decade counters.
#
# Decade counters are a problem for decoding because they trigger a spurious
# extra step whenever they overflow, and they count in a data-dependent way on
# each program input (e.g. p.Ai, p.Bi, ...). Possibly some scheme could be
# devised to guarantee decade counters are safe before p.Ai for decode - they
# don't have an explicit clear control, but do clear on overflow.  But it's far
# simpler just to unplug the things.
#
# Associator switches on the MP front panel don't permit disconnecting decade
# counters, but the operating manual notes "To disassociate a decade from its
# stepper pull out gate tube 63 in the stepper plug-in unit. See block diagram
# PX-8-304."
s p.gate63 unplug

# Shared program used to clear master programmer steppers in anticipation of
# decode.  Triggered via pulse amplifier because it is necessary for this to
# happen directly in the cycle prior to decode, which may occur in a few
# different places in the fetch sequence.
p {p-clear-mp} p.Acdi
p {p-clear-mp} p.Bcdi
p {p-clear-mp} p.Ccdi
p {p-clear-mp} p.Dcdi
p {p-clear-mp} p.Ecdi
p {p-clear-mp} p.Fcdi
p {p-clear-mp} p.Gcdi
p {p-clear-mp} p.Hcdi
p {p-clear-mp} p.Jcdi
p {p-clear-mp} p.Kcdi

# Receive opcode at master programmer stepper direct inputs
p {d-main} ad.dp.{ad-opcode-10}.10   # opcode 10's digit (0x-5x)
p ad.dp.{ad-opcode-10}.10 p.Adi
p {d-main} ad.dp.{ad-opcode-9}.9     # opcode 1's digit (0x-5x)
p ad.dp.{ad-opcode-9}.9 p.Bdi
p ad.dp.{ad-opcode-9}.9 p.Cdi
p ad.dp.{ad-opcode-9}.9 p.Ddi
p ad.dp.{ad-opcode-9}.9 p.Edi
p ad.dp.{ad-opcode-9}.9 p.Fdi
p ad.dp.{ad-opcode-9}.9 p.Gdi        # opcode 1's digit (0x-5x) or 10's digit (7x-9x)
p ad.dp.{ad-opcode-10}.10 p.Hdi      # opcode 1's digit (7x-9x)
p ad.dp.{ad-opcode-10}.10 p.Jdi
p ad.dp.{ad-opcode-10}.10 p.Kdi

# Trigger the appropriate ones digit for opcodes <= 55
p p.A1o p.Bi
p p.A2o p.Ci
p p.A3o p.Di
p p.A4o p.Ei
p p.A5o p.Fi
p p.A6o {p-mp-5x}
# Gi is triggered both by A6o when decoding 5x, and explicitly via a program
# control to decode the tens digit of 7x-9x.
p pa.1.sa.1 {p-mp-5x}
p pa.1.sb.1 p.Gi
p pa.1.sa.2 {p-mp-789x}
p pa.1.sb.2 p.Gi

# Trigger the appropriate ones digit for opcodes >= 70.
p p.G1o p.Hi
p p.G2o p.Ji
p p.G3o p.Ki

# Wire the outputs to individual opcode programs
defmacro op-lines-le55 stepper tens
  p p.$stepper1o {p-op$tens0}
  p p.$stepper2o {p-op$tens1}
  p p.$stepper3o {p-op$tens2}
  p p.$stepper4o {p-op$tens3}
  p p.$stepper5o {p-op$tens4}
  p p.$stepper6o {p-op$tens5}
endmacro

$op-lines-le55 B 0
$op-lines-le55 C 1
$op-lines-le55 D 2
$op-lines-le55 E 3
$op-lines-le55 F 4
# G1o-G3o are used for 7x-9x.
p p.G4o {p-op53}
p p.G5o {p-op54}
p p.G6o {p-op55}

defmacro op-lines-gt55 stepper tens
  p p.$stepper1o {p-op$tens9}
  p p.$stepper2o {p-op$tens8}
  p p.$stepper3o {p-op$tens7}
  p p.$stepper4o {p-op$tens6}
  p p.$stepper5o {p-op$tens5}
  p p.$stepper6o {p-op$tens4}
endmacro

$op-lines-gt55 H 9
$op-lines-gt55 J 8
$op-lines-gt55 K 7

# XXX debug
p {p-op00} debug.bp.1
p {p-op01} debug.bp.2
p {p-op02} debug.bp.3
p {p-op03} debug.bp.4
p {p-op04} debug.bp.5
p {p-op05} debug.bp.6

p {p-op74} debug.bp.11
p {p-op75} debug.bp.12
p {p-op76} debug.bp.13
p {p-op77} debug.bp.14
p {p-op78} debug.bp.15
p {p-op79} debug.bp.16

p {p-op53} debug.bp.7
p {p-op54} debug.bp.8
p {p-op55} debug.bp.9


# -- CONTROL CYCLE --

# initiate button
p i.io {p-clearex-fetch}

# - A program line to jump to if ex has something in it
$clear {p-clearex-fetch} {a-ex} {t-clearex-fetch} {p-fetch}


# -- p-fetch: begin next instruction
# During this cycle:
#  - discriminate, to decide whether to fetch new instructions
#  - read out the contents of IR into EX
#  - send next instruction (I1) to PC (assume PC.SS is 0)
p {p-fetch} debug.assert.1
p {p-fetch} debug.assert.2
s debug.assert.1 {a-ex}~P0000000000
s debug.assert.2 {a-pc}~x00xxxxxxxx

# If more instructions are needed, IR is P 0, and control proceeds to p-fetchline.
# Otherwise, IR is M 99-I5 99-I4 99-I3 99-I2 100-I1 and we trigger p-nofetch.
$discriminate {p-fetch} {a-ir} a20 fetch {d-irA} {d-irS} {p-fetchline} {p-nofetch}
s {a-ir}.cc{t-fetch} C   # clear IR after transmission

# IR -> EX 
# $discriminate sends IR on d-main, and EX receives it permuted I5 I4 I3 I2 I1
# -> I1 I5 I4 I3 I2.  This puts the next instruction in the left (first two
# digits) of EX.  NB preserves the sign of IR, so will be M in p-nofetch.
$recx {p-fetch} {a-ex} {r-fetch} {i-rotate-irA}

# IR -S-shiftl8-irS-> PC
# Also send first opcode to left of PC (using the S output to undo the existing
# complement when we loaded IR). This copy of the instruction will later be
# sent to MP steppers for decoding.
$recx {p-fetch} {a-pc} {r-fetch} {i-shiftl8-irS}



# -- {p-nofetch} no fetch needed, begin instruction decode
# EX starts M 100-I1 99-I5 99-I4 99-I3 99-I2
p {p-nofetch} debug.assert.3
s debug.assert.3 {a-ex}~Mxxxxxxxxxx

# Begin decode by adding 55 to EX, from constant transmitter

# Send 55 from CT on d-main
p {p-nofetch} c.26i 
s c.s26 Kl
s c.k10 5
s c.k9  5
p c.o {d-main} 

# EX += d-main (55) for discrimination next cycle.  For example,
# - If I1 is 01, EX will contain M (100-01) = M 99...
#   Adding 55 to 99 will wrap and set EX to P 54...
# - If I1 is 71, EX will contain M (100-71) = M 29...
#   Adding 55 to 29 will set EX to M 84...
$rec {p-nofetch} {a-ex} {t-nofetch} {i-main} {p-disc-op}


# -- {p-disc-op} discriminate opcode I1>55, to switch between two decode pathways
# EX starts P/M 155-I1 99-I5 99-I4 99-I3 99-I2 and ends clear.
# Also store shifted instructions back to IR, deleting just-dispatched opcode.
p {p-disc-op} debug.assert.4
s debug.assert.4 {a-ir}~P0000000000

# Discriminate based on sign of EX, already set based on whether I1 > 55.
$discriminate {p-disc-op} {a-ex} a20 disc-op {d-exA} {d-exS} {p-ople55} {p-opgt55}
s {a-ex}.cc{t-disc-op} C  # clear EX

# Meanwhile, store EX back into IR without the instruction we are now decoding.
# Replace first two digits with PM; gives M99 if EX<0 at this point, P00
# otherwise which is fixed in p-ople55.
$recx {p-disc-op} {a-ir} {r-disc-op} {i-fill99}


# -- p-ople55 - begin decode of opcode which is <= 55
# IR is now P 00...
# Add M 9900000001 so it resets to M but then overflows to P if no more opcodes
# This also turns 99-I2 into 100-I2 at the right of IR.
p {p-ople55} debug.assert.5
s debug.assert.5 {a-ir}~P00xxxxxxxx

# M99000 -> d-main
p {p-ople55} c.27i 
s c.s27 Jl
s c.jl M
s c.j10 9
s c.j9  9 

# a-ir += d-main
$recinc {p-ople55} {a-ir} {t-ople55} {i-main} {p-ople55-2}

# Clear MP via pulse amplifier.
# FIXME Steppers should logically be cleared "during p-ople55", but
# 1) Clearing isn't synchronous in eniacsim, so this really happens during the
#    Cpp of cycle p-ople55 when p-ople55-2 is asserted just prior to decode in
#    that cycle.
# 2) The operating manual mentions that "If a clearing pulse and a stepping
#    pulse arrive at the same time, the stepper will be cleared, not stepped";
#    so it ought to be ok to do this in p-ople55 anyway, but the effect of that
#    in eniacsim would be to clear and then decode M99...1
p pa.1.sa.3 {p-ople55-2}
p pa.1.sb.3 {p-clear-mp}


# -- p-ople55-2 - send tens digit of opcode to stepper A, ones digit to B-G
p {p-ople55-2} debug.assert.7
s debug.assert.7 {a-ex}~P0000000000

# Send PC on main and receive in EX with SS (opcode field) clear.
$sendc {p-ople55-2} {a-pc} {t-ople55-2} A {p-ople55-3}
$recx {p-ople55-2} {a-ex} {t-ople55-2} {i-clearA}


# -- p-ople55-3 - send input pulse to master programmer
p {p-ople55-3} debug.assert.8
p {p-ople55-3} debug.assert.9
# sign of EX must be P to avoid misfiring p-ople55
s debug.assert.8 {a-ex}~P00xxxxxxxx
s debug.assert.9 {a-pc}~P0000000000

# Reset PC opcode field and clear EX to prep for instruction.
# Note that this would trigger the MP steppers, but the opcode field contains
# 00 here so this doesn't mess up decode.
$sendcx {p-ople55-3} {a-ex} {t-ople55-3} A
$recx {p-ople55-3} {a-pc} {t-ople55-3} {i-main}

# Trigger master programmer
p {p-ople55-3} p.Ai


# -- p-opgt55 - decode opcode which is > 55
# Leftmost opcode in IR is now M99
p {p-opgt55} debug.assert.10
s debug.assert.10 {a-ir}~M99xxxxxxxx

# IR += 1 to cause overflow if no more opcodes (roll 9's over to 0)
$recinc {p-opgt55} {a-ir} {t-plusone} {i-nothing} {p-opgt55-2}

# Clear MP via pulse amplifier (see note in p-ople55).
p pa.1.sa.4 {p-opgt55-2}
p pa.1.sb.4 {p-clear-mp}


# -- p-opgt55-2 - send tens digit to mp G stepper, ones digit to H-K
p {p-opgt55-2} debug.assert.11
s debug.assert.11 {a-ex}~P0000000000

# Send PC subtractively on main and receive in EX with SS (opcode field) clear.
$sendc {p-opgt55-2} {a-pc} {t-opgt55-2} S {p-opgt55-3}
$recx {p-opgt55-2} {a-ex} {t-opgt55-2} {i-main}


# -- p-opgt55-3 - send input pulse to master programmer
# Sign of EX must be M to avoid misfiring p-ople55
p {p-opgt55-3} debug.assert.12
s debug.assert.12 {a-ex}~Mxxxxxxxxxx

# Reset PC opcode field and clear EX to prep for instruction.
$sendcx {p-opgt55-3} {a-ex} {t-opgt55-3} S
$recx {p-opgt55-3} {a-pc} {t-opgt55-3} {i-exS-clearA}

# Trigger master programmer.
p {p-opgt55-3} {p-mp-789x}


# -- {p-fetchline} no more instructons in IR, load new line from ft
# - stimulate FT, goto {p-fetcharg} for argument
# - delay 4 then goto {p-fetchread}

# - clear IR (needed only on jumps, otherwise already zero here from overflow) and delay 4
$clear {p-fetchline} {a-ir} {t-fetchline} {p-fetchread}
s {a-ir}.rp{t-fetchline} 4    # repeat 4 to wait for FT result

# - clear EX as well, it will also receive from FT
$clearx {p-fetchline} {a-ex} {t-fetchline}

# - trigger ft
p {p-fetchline} f1.1i         
s f1.rp1 1                    # 1 repeat (neccessary?)
s f1.op1 S0                   # send complement, don't offset argument
s f1.cl1 C                    # pulse on C when done
p f1.C {p-fetcharg}           # goto when ready for argument


# -- {p-fetcharg} ft argument request
# - FT <- bottom two digits of PC (a1)

$sendx {p-fetcharg} {a-pc} {t-fetcharg} A
p {d-main} f1.arg  # only bottom two digit lines connect so no deleter is required


# -- {p-fetchread} read ft line of instructions
#  - FT sends complement of A and B
#  - IR = M I6 I5 I4 I3 I2+1 = B2B1 B4B3 B6B5 A2A1 A4A3+1
#  - EX = M I1 00 00 00 00  = A6A5+1 00 00 00 00
#  - PC += 1
#  - goto p-decode

# B2B1 B4B3 B6B5 A2A1 A4A3+1 -> IR
# NYI: should goto decode opcode in EX, not printex
p f1.A {d-f1A}                      # FIXME in the sim, need output T-s to avoid using extra digit tray
p {d-f1A} ad.permute.{ad-fetchA}
s ad.permute.{ad-fetchA} 0,0,0,0,0,0,0,2,1,4,3
p ad.permute.{ad-fetchA} {d-fetch}

p f1.B ad.permute.{ad-fetchB}
s ad.permute.{ad-fetchB} 11,2,1,4,3,6,5,0,0,0,0
p ad.permute.{ad-fetchB} {d-fetch}

#$recinc {p-fetchread} {a-ir} {t-fetchread} {i-fetch} {p-flipex-printex} 


# A6A5+1 00 00 00 00  -> EX
p {d-f1A} ad.permute.{ad-fetch-ex}
s ad.permute.{ad-fetch-ex} 0,6,5,0,0,0,0,0,0,0,0
p ad.permute.{ad-fetch-ex} {d-main}

$recincx {p-fetchread} {a-ex} {r-fetchread} {i-main} 


# PC += 1
$recincx {p-fetchread} {a-pc} {r-fetchread} {i-nothing}

# ------------ DATA --------------

# function table values
s f1.RA0L6 0
s f1.RA0L5 1
s f1.RA0L4 0
s f1.RA0L3 2
s f1.RA0L2 0
s f1.RA0L1 3

s f1.RB0L6 0
s f1.RB0L5 4
s f1.RB0L4 0
s f1.RB0L3 5
s f1.RB0L2 0
s f1.RB0L1 6


s f1.RA1L6 1
s f1.RA1L5 1
s f1.RA1L4 1
s f1.RA1L3 2
s f1.RA1L2 1
s f1.RA1L1 3

s f1.RB1L6 1
s f1.RB1L5 4
s f1.RB1L4 1
s f1.RB1L3 5
s f1.RB1L2 1
s f1.RB1L1 6


s f1.RA2L6 2
s f1.RA2L5 1
s f1.RA2L4 2
s f1.RA2L3 2
s f1.RA2L2 2
s f1.RA2L1 3

s f1.RB2L6 2
s f1.RB2L5 4
s f1.RB2L4 2
s f1.RB2L3 5
s f1.RB2L2 2
s f1.RB2L1 6


s f1.RA3L6 3
s f1.RA3L5 1
s f1.RA3L4 3
s f1.RA3L3 2
s f1.RA3L2 3
s f1.RA3L1 3

s f1.RB3L6 3
s f1.RB3L5 4
s f1.RB3L4 3
s f1.RB3L3 5
s f1.RB3L2 3
s f1.RB3L1 6


s f1.RA4L6 4
s f1.RA4L5 1
s f1.RA4L4 4
s f1.RA4L3 2
s f1.RA4L2 4
s f1.RA4L1 3

s f1.RB4L6 4
s f1.RB4L5 4
s f1.RB4L4 4
s f1.RB4L3 5
s f1.RB4L2 4
s f1.RB4L1 6

